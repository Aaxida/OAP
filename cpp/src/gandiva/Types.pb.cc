// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Types.proto

#include "Types.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_Types_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BinaryNode_Types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Types_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BooleanNode_Types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Types_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DecimalNode_Types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Types_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DoubleNode_Types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Types_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ExtGandivaType_Types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Types_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FloatNode_Types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Types_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_IntNode_Types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Types_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LongNode_Types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Types_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StringNode_Types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Types_2eproto ::google::protobuf::internal::SCCInfo<12> scc_info_AndNode_Types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Types_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_BinaryConstants_Types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Types_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_FieldNode_Types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Types_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Field_Types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Types_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_FunctionSignature_Types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Types_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_IntConstants_Types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Types_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LongConstants_Types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Types_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_NullNode_Types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Types_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_StringConstants_Types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Types_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ExpressionRoot_Types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Types_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_InNode_Types_2eproto;
namespace types {
class ExtGandivaTypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExtGandivaType> _instance;
} _ExtGandivaType_default_instance_;
class FieldDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Field> _instance;
} _Field_default_instance_;
class FieldNodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FieldNode> _instance;
} _FieldNode_default_instance_;
class FunctionNodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FunctionNode> _instance;
} _FunctionNode_default_instance_;
class IfNodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IfNode> _instance;
} _IfNode_default_instance_;
class AndNodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AndNode> _instance;
} _AndNode_default_instance_;
class OrNodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OrNode> _instance;
} _OrNode_default_instance_;
class NullNodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NullNode> _instance;
} _NullNode_default_instance_;
class IntNodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IntNode> _instance;
} _IntNode_default_instance_;
class FloatNodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FloatNode> _instance;
} _FloatNode_default_instance_;
class DoubleNodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DoubleNode> _instance;
} _DoubleNode_default_instance_;
class BooleanNodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BooleanNode> _instance;
} _BooleanNode_default_instance_;
class LongNodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LongNode> _instance;
} _LongNode_default_instance_;
class StringNodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StringNode> _instance;
} _StringNode_default_instance_;
class BinaryNodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BinaryNode> _instance;
} _BinaryNode_default_instance_;
class DecimalNodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DecimalNode> _instance;
} _DecimalNode_default_instance_;
class TreeNodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TreeNode> _instance;
} _TreeNode_default_instance_;
class ExpressionRootDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExpressionRoot> _instance;
} _ExpressionRoot_default_instance_;
class ExpressionListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExpressionList> _instance;
} _ExpressionList_default_instance_;
class ConditionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Condition> _instance;
} _Condition_default_instance_;
class SchemaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Schema> _instance;
} _Schema_default_instance_;
class GandivaDataTypesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GandivaDataTypes> _instance;
} _GandivaDataTypes_default_instance_;
class GandivaFunctionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GandivaFunctions> _instance;
} _GandivaFunctions_default_instance_;
class FunctionSignatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FunctionSignature> _instance;
} _FunctionSignature_default_instance_;
class InNodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InNode> _instance;
} _InNode_default_instance_;
class IntConstantsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IntConstants> _instance;
} _IntConstants_default_instance_;
class LongConstantsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LongConstants> _instance;
} _LongConstants_default_instance_;
class StringConstantsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StringConstants> _instance;
} _StringConstants_default_instance_;
class BinaryConstantsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BinaryConstants> _instance;
} _BinaryConstants_default_instance_;
}  // namespace types
static void InitDefaultsExtGandivaType_Types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::types::_ExtGandivaType_default_instance_;
    new (ptr) ::types::ExtGandivaType();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::types::ExtGandivaType::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ExtGandivaType_Types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsExtGandivaType_Types_2eproto}, {}};

static void InitDefaultsField_Types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::types::_Field_default_instance_;
    new (ptr) ::types::Field();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::types::Field::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Field_Types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsField_Types_2eproto}, {
      &scc_info_ExtGandivaType_Types_2eproto.base,}};

static void InitDefaultsFieldNode_Types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::types::_FieldNode_default_instance_;
    new (ptr) ::types::FieldNode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::types::FieldNode::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FieldNode_Types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFieldNode_Types_2eproto}, {
      &scc_info_Field_Types_2eproto.base,}};

static void InitDefaultsAndNode_Types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::types::_FunctionNode_default_instance_;
    new (ptr) ::types::FunctionNode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::types::_IfNode_default_instance_;
    new (ptr) ::types::IfNode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::types::_AndNode_default_instance_;
    new (ptr) ::types::AndNode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::types::_OrNode_default_instance_;
    new (ptr) ::types::OrNode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::types::_TreeNode_default_instance_;
    new (ptr) ::types::TreeNode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::types::FunctionNode::InitAsDefaultInstance();
  ::types::IfNode::InitAsDefaultInstance();
  ::types::AndNode::InitAsDefaultInstance();
  ::types::OrNode::InitAsDefaultInstance();
  ::types::TreeNode::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<12> scc_info_AndNode_Types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 12, InitDefaultsAndNode_Types_2eproto}, {
      &scc_info_ExtGandivaType_Types_2eproto.base,
      &scc_info_FieldNode_Types_2eproto.base,
      &scc_info_NullNode_Types_2eproto.base,
      &scc_info_IntNode_Types_2eproto.base,
      &scc_info_FloatNode_Types_2eproto.base,
      &scc_info_LongNode_Types_2eproto.base,
      &scc_info_BooleanNode_Types_2eproto.base,
      &scc_info_DoubleNode_Types_2eproto.base,
      &scc_info_StringNode_Types_2eproto.base,
      &scc_info_BinaryNode_Types_2eproto.base,
      &scc_info_DecimalNode_Types_2eproto.base,
      &scc_info_InNode_Types_2eproto.base,}};

static void InitDefaultsNullNode_Types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::types::_NullNode_default_instance_;
    new (ptr) ::types::NullNode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::types::NullNode::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NullNode_Types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNullNode_Types_2eproto}, {
      &scc_info_ExtGandivaType_Types_2eproto.base,}};

static void InitDefaultsIntNode_Types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::types::_IntNode_default_instance_;
    new (ptr) ::types::IntNode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::types::IntNode::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_IntNode_Types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIntNode_Types_2eproto}, {}};

static void InitDefaultsFloatNode_Types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::types::_FloatNode_default_instance_;
    new (ptr) ::types::FloatNode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::types::FloatNode::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FloatNode_Types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFloatNode_Types_2eproto}, {}};

static void InitDefaultsDoubleNode_Types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::types::_DoubleNode_default_instance_;
    new (ptr) ::types::DoubleNode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::types::DoubleNode::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DoubleNode_Types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDoubleNode_Types_2eproto}, {}};

static void InitDefaultsBooleanNode_Types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::types::_BooleanNode_default_instance_;
    new (ptr) ::types::BooleanNode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::types::BooleanNode::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BooleanNode_Types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBooleanNode_Types_2eproto}, {}};

static void InitDefaultsLongNode_Types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::types::_LongNode_default_instance_;
    new (ptr) ::types::LongNode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::types::LongNode::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LongNode_Types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLongNode_Types_2eproto}, {}};

static void InitDefaultsStringNode_Types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::types::_StringNode_default_instance_;
    new (ptr) ::types::StringNode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::types::StringNode::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StringNode_Types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStringNode_Types_2eproto}, {}};

static void InitDefaultsBinaryNode_Types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::types::_BinaryNode_default_instance_;
    new (ptr) ::types::BinaryNode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::types::BinaryNode::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BinaryNode_Types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBinaryNode_Types_2eproto}, {}};

static void InitDefaultsDecimalNode_Types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::types::_DecimalNode_default_instance_;
    new (ptr) ::types::DecimalNode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::types::DecimalNode::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DecimalNode_Types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDecimalNode_Types_2eproto}, {}};

static void InitDefaultsExpressionRoot_Types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::types::_ExpressionRoot_default_instance_;
    new (ptr) ::types::ExpressionRoot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::types::ExpressionRoot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ExpressionRoot_Types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsExpressionRoot_Types_2eproto}, {
      &scc_info_AndNode_Types_2eproto.base,
      &scc_info_Field_Types_2eproto.base,}};

static void InitDefaultsExpressionList_Types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::types::_ExpressionList_default_instance_;
    new (ptr) ::types::ExpressionList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::types::ExpressionList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ExpressionList_Types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsExpressionList_Types_2eproto}, {
      &scc_info_ExpressionRoot_Types_2eproto.base,}};

static void InitDefaultsCondition_Types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::types::_Condition_default_instance_;
    new (ptr) ::types::Condition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::types::Condition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Condition_Types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCondition_Types_2eproto}, {
      &scc_info_AndNode_Types_2eproto.base,}};

static void InitDefaultsSchema_Types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::types::_Schema_default_instance_;
    new (ptr) ::types::Schema();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::types::Schema::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Schema_Types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSchema_Types_2eproto}, {
      &scc_info_Field_Types_2eproto.base,}};

static void InitDefaultsGandivaDataTypes_Types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::types::_GandivaDataTypes_default_instance_;
    new (ptr) ::types::GandivaDataTypes();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::types::GandivaDataTypes::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GandivaDataTypes_Types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGandivaDataTypes_Types_2eproto}, {
      &scc_info_ExtGandivaType_Types_2eproto.base,}};

static void InitDefaultsGandivaFunctions_Types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::types::_GandivaFunctions_default_instance_;
    new (ptr) ::types::GandivaFunctions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::types::GandivaFunctions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GandivaFunctions_Types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGandivaFunctions_Types_2eproto}, {
      &scc_info_FunctionSignature_Types_2eproto.base,}};

static void InitDefaultsFunctionSignature_Types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::types::_FunctionSignature_default_instance_;
    new (ptr) ::types::FunctionSignature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::types::FunctionSignature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FunctionSignature_Types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFunctionSignature_Types_2eproto}, {
      &scc_info_ExtGandivaType_Types_2eproto.base,}};

static void InitDefaultsInNode_Types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::types::_InNode_default_instance_;
    new (ptr) ::types::InNode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::types::InNode::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_InNode_Types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsInNode_Types_2eproto}, {
      &scc_info_FieldNode_Types_2eproto.base,
      &scc_info_IntConstants_Types_2eproto.base,
      &scc_info_LongConstants_Types_2eproto.base,
      &scc_info_StringConstants_Types_2eproto.base,
      &scc_info_BinaryConstants_Types_2eproto.base,}};

static void InitDefaultsIntConstants_Types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::types::_IntConstants_default_instance_;
    new (ptr) ::types::IntConstants();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::types::IntConstants::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_IntConstants_Types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsIntConstants_Types_2eproto}, {
      &scc_info_IntNode_Types_2eproto.base,}};

static void InitDefaultsLongConstants_Types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::types::_LongConstants_default_instance_;
    new (ptr) ::types::LongConstants();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::types::LongConstants::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LongConstants_Types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLongConstants_Types_2eproto}, {
      &scc_info_LongNode_Types_2eproto.base,}};

static void InitDefaultsStringConstants_Types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::types::_StringConstants_default_instance_;
    new (ptr) ::types::StringConstants();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::types::StringConstants::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StringConstants_Types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStringConstants_Types_2eproto}, {
      &scc_info_StringNode_Types_2eproto.base,}};

static void InitDefaultsBinaryConstants_Types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::types::_BinaryConstants_default_instance_;
    new (ptr) ::types::BinaryConstants();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::types::BinaryConstants::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BinaryConstants_Types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBinaryConstants_Types_2eproto}, {
      &scc_info_BinaryNode_Types_2eproto.base,}};

void InitDefaults_Types_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_ExtGandivaType_Types_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Field_Types_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FieldNode_Types_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AndNode_Types_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NullNode_Types_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IntNode_Types_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FloatNode_Types_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DoubleNode_Types_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BooleanNode_Types_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LongNode_Types_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StringNode_Types_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BinaryNode_Types_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DecimalNode_Types_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExpressionRoot_Types_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExpressionList_Types_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Condition_Types_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Schema_Types_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GandivaDataTypes_Types_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GandivaFunctions_Types_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FunctionSignature_Types_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InNode_Types_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IntConstants_Types_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LongConstants_Types_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StringConstants_Types_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BinaryConstants_Types_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_Types_2eproto[29];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_Types_2eproto[4];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_Types_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_Types_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::types::ExtGandivaType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::types::ExtGandivaType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::types::ExtGandivaType, type_),
  PROTOBUF_FIELD_OFFSET(::types::ExtGandivaType, width_),
  PROTOBUF_FIELD_OFFSET(::types::ExtGandivaType, precision_),
  PROTOBUF_FIELD_OFFSET(::types::ExtGandivaType, scale_),
  PROTOBUF_FIELD_OFFSET(::types::ExtGandivaType, dateunit_),
  PROTOBUF_FIELD_OFFSET(::types::ExtGandivaType, timeunit_),
  PROTOBUF_FIELD_OFFSET(::types::ExtGandivaType, timezone_),
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  PROTOBUF_FIELD_OFFSET(::types::Field, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::types::Field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::types::Field, name_),
  PROTOBUF_FIELD_OFFSET(::types::Field, type_),
  PROTOBUF_FIELD_OFFSET(::types::Field, nullable_),
  PROTOBUF_FIELD_OFFSET(::types::Field, children_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::types::FieldNode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::types::FieldNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::types::FieldNode, field_),
  0,
  PROTOBUF_FIELD_OFFSET(::types::FunctionNode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::types::FunctionNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::types::FunctionNode, functionname_),
  PROTOBUF_FIELD_OFFSET(::types::FunctionNode, inargs_),
  PROTOBUF_FIELD_OFFSET(::types::FunctionNode, returntype_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::types::IfNode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::types::IfNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::types::IfNode, cond_),
  PROTOBUF_FIELD_OFFSET(::types::IfNode, thennode_),
  PROTOBUF_FIELD_OFFSET(::types::IfNode, elsenode_),
  PROTOBUF_FIELD_OFFSET(::types::IfNode, returntype_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::types::AndNode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::types::AndNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::types::AndNode, args_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::types::OrNode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::types::OrNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::types::OrNode, args_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::types::NullNode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::types::NullNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::types::NullNode, type_),
  0,
  PROTOBUF_FIELD_OFFSET(::types::IntNode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::types::IntNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::types::IntNode, value_),
  0,
  PROTOBUF_FIELD_OFFSET(::types::FloatNode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::types::FloatNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::types::FloatNode, value_),
  0,
  PROTOBUF_FIELD_OFFSET(::types::DoubleNode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::types::DoubleNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::types::DoubleNode, value_),
  0,
  PROTOBUF_FIELD_OFFSET(::types::BooleanNode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::types::BooleanNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::types::BooleanNode, value_),
  0,
  PROTOBUF_FIELD_OFFSET(::types::LongNode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::types::LongNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::types::LongNode, value_),
  0,
  PROTOBUF_FIELD_OFFSET(::types::StringNode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::types::StringNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::types::StringNode, value_),
  0,
  PROTOBUF_FIELD_OFFSET(::types::BinaryNode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::types::BinaryNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::types::BinaryNode, value_),
  0,
  PROTOBUF_FIELD_OFFSET(::types::DecimalNode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::types::DecimalNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::types::DecimalNode, value_),
  PROTOBUF_FIELD_OFFSET(::types::DecimalNode, precision_),
  PROTOBUF_FIELD_OFFSET(::types::DecimalNode, scale_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::types::TreeNode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::types::TreeNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::types::TreeNode, fieldnode_),
  PROTOBUF_FIELD_OFFSET(::types::TreeNode, fnnode_),
  PROTOBUF_FIELD_OFFSET(::types::TreeNode, ifnode_),
  PROTOBUF_FIELD_OFFSET(::types::TreeNode, andnode_),
  PROTOBUF_FIELD_OFFSET(::types::TreeNode, ornode_),
  PROTOBUF_FIELD_OFFSET(::types::TreeNode, nullnode_),
  PROTOBUF_FIELD_OFFSET(::types::TreeNode, intnode_),
  PROTOBUF_FIELD_OFFSET(::types::TreeNode, floatnode_),
  PROTOBUF_FIELD_OFFSET(::types::TreeNode, longnode_),
  PROTOBUF_FIELD_OFFSET(::types::TreeNode, booleannode_),
  PROTOBUF_FIELD_OFFSET(::types::TreeNode, doublenode_),
  PROTOBUF_FIELD_OFFSET(::types::TreeNode, stringnode_),
  PROTOBUF_FIELD_OFFSET(::types::TreeNode, binarynode_),
  PROTOBUF_FIELD_OFFSET(::types::TreeNode, decimalnode_),
  PROTOBUF_FIELD_OFFSET(::types::TreeNode, innode_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  PROTOBUF_FIELD_OFFSET(::types::ExpressionRoot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::types::ExpressionRoot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::types::ExpressionRoot, root_),
  PROTOBUF_FIELD_OFFSET(::types::ExpressionRoot, resulttype_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::types::ExpressionList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::types::ExpressionList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::types::ExpressionList, exprs_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::types::Condition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::types::Condition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::types::Condition, root_),
  0,
  PROTOBUF_FIELD_OFFSET(::types::Schema, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::types::Schema, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::types::Schema, columns_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::types::GandivaDataTypes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::types::GandivaDataTypes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::types::GandivaDataTypes, datatype_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::types::GandivaFunctions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::types::GandivaFunctions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::types::GandivaFunctions, function_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::types::FunctionSignature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::types::FunctionSignature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::types::FunctionSignature, name_),
  PROTOBUF_FIELD_OFFSET(::types::FunctionSignature, returntype_),
  PROTOBUF_FIELD_OFFSET(::types::FunctionSignature, paramtypes_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::types::InNode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::types::InNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::types::InNode, field_),
  PROTOBUF_FIELD_OFFSET(::types::InNode, intvalues_),
  PROTOBUF_FIELD_OFFSET(::types::InNode, longvalues_),
  PROTOBUF_FIELD_OFFSET(::types::InNode, stringvalues_),
  PROTOBUF_FIELD_OFFSET(::types::InNode, binaryvalues_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::types::IntConstants, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::types::IntConstants, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::types::IntConstants, intvalues_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::types::LongConstants, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::types::LongConstants, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::types::LongConstants, longvalues_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::types::StringConstants, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::types::StringConstants, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::types::StringConstants, stringvalues_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::types::BinaryConstants, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::types::BinaryConstants, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::types::BinaryConstants, binaryvalues_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::types::ExtGandivaType)},
  { 19, 28, sizeof(::types::Field)},
  { 32, 38, sizeof(::types::FieldNode)},
  { 39, 47, sizeof(::types::FunctionNode)},
  { 50, 59, sizeof(::types::IfNode)},
  { 63, 69, sizeof(::types::AndNode)},
  { 70, 76, sizeof(::types::OrNode)},
  { 77, 83, sizeof(::types::NullNode)},
  { 84, 90, sizeof(::types::IntNode)},
  { 91, 97, sizeof(::types::FloatNode)},
  { 98, 104, sizeof(::types::DoubleNode)},
  { 105, 111, sizeof(::types::BooleanNode)},
  { 112, 118, sizeof(::types::LongNode)},
  { 119, 125, sizeof(::types::StringNode)},
  { 126, 132, sizeof(::types::BinaryNode)},
  { 133, 141, sizeof(::types::DecimalNode)},
  { 144, 164, sizeof(::types::TreeNode)},
  { 179, 186, sizeof(::types::ExpressionRoot)},
  { 188, 194, sizeof(::types::ExpressionList)},
  { 195, 201, sizeof(::types::Condition)},
  { 202, 208, sizeof(::types::Schema)},
  { 209, 215, sizeof(::types::GandivaDataTypes)},
  { 216, 222, sizeof(::types::GandivaFunctions)},
  { 223, 231, sizeof(::types::FunctionSignature)},
  { 234, 244, sizeof(::types::InNode)},
  { 249, 255, sizeof(::types::IntConstants)},
  { 256, 262, sizeof(::types::LongConstants)},
  { 263, 269, sizeof(::types::StringConstants)},
  { 270, 276, sizeof(::types::BinaryConstants)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::types::_ExtGandivaType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::types::_Field_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::types::_FieldNode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::types::_FunctionNode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::types::_IfNode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::types::_AndNode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::types::_OrNode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::types::_NullNode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::types::_IntNode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::types::_FloatNode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::types::_DoubleNode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::types::_BooleanNode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::types::_LongNode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::types::_StringNode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::types::_BinaryNode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::types::_DecimalNode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::types::_TreeNode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::types::_ExpressionRoot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::types::_ExpressionList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::types::_Condition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::types::_Schema_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::types::_GandivaDataTypes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::types::_GandivaFunctions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::types::_FunctionSignature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::types::_InNode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::types::_IntConstants_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::types::_LongConstants_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::types::_StringConstants_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::types::_BinaryConstants_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_Types_2eproto = {
  {}, AddDescriptors_Types_2eproto, "Types.proto", schemas,
  file_default_instances, TableStruct_Types_2eproto::offsets,
  file_level_metadata_Types_2eproto, 29, file_level_enum_descriptors_Types_2eproto, file_level_service_descriptors_Types_2eproto,
};

const char descriptor_table_protodef_Types_2eproto[] =
  "\n\013Types.proto\022\005types\"\273\001\n\016ExtGandivaType\022"
  " \n\004type\030\001 \001(\0162\022.types.GandivaType\022\r\n\005wid"
  "th\030\002 \001(\r\022\021\n\tprecision\030\003 \001(\005\022\r\n\005scale\030\004 \001"
  "(\005\022!\n\010dateUnit\030\005 \001(\0162\017.types.DateUnit\022!\n"
  "\010timeUnit\030\006 \001(\0162\017.types.TimeUnit\022\020\n\010time"
  "Zone\030\007 \001(\t\"l\n\005Field\022\014\n\004name\030\001 \001(\t\022#\n\004typ"
  "e\030\002 \001(\0132\025.types.ExtGandivaType\022\020\n\010nullab"
  "le\030\003 \001(\010\022\036\n\010children\030\004 \003(\0132\014.types.Field"
  "\"(\n\tFieldNode\022\033\n\005field\030\001 \001(\0132\014.types.Fie"
  "ld\"p\n\014FunctionNode\022\024\n\014functionName\030\001 \001(\t"
  "\022\037\n\006inArgs\030\002 \003(\0132\017.types.TreeNode\022)\n\nret"
  "urnType\030\003 \001(\0132\025.types.ExtGandivaType\"\230\001\n"
  "\006IfNode\022\035\n\004cond\030\001 \001(\0132\017.types.TreeNode\022!"
  "\n\010thenNode\030\002 \001(\0132\017.types.TreeNode\022!\n\010els"
  "eNode\030\003 \001(\0132\017.types.TreeNode\022)\n\nreturnTy"
  "pe\030\004 \001(\0132\025.types.ExtGandivaType\"(\n\007AndNo"
  "de\022\035\n\004args\030\001 \003(\0132\017.types.TreeNode\"\'\n\006OrN"
  "ode\022\035\n\004args\030\001 \003(\0132\017.types.TreeNode\"/\n\010Nu"
  "llNode\022#\n\004type\030\001 \001(\0132\025.types.ExtGandivaT"
  "ype\"\030\n\007IntNode\022\r\n\005value\030\001 \001(\005\"\032\n\tFloatNo"
  "de\022\r\n\005value\030\001 \001(\002\"\033\n\nDoubleNode\022\r\n\005value"
  "\030\001 \001(\001\"\034\n\013BooleanNode\022\r\n\005value\030\001 \001(\010\"\031\n\010"
  "LongNode\022\r\n\005value\030\001 \001(\003\"\033\n\nStringNode\022\r\n"
  "\005value\030\001 \001(\014\"\033\n\nBinaryNode\022\r\n\005value\030\001 \001("
  "\014\">\n\013DecimalNode\022\r\n\005value\030\001 \001(\t\022\021\n\tpreci"
  "sion\030\002 \001(\005\022\r\n\005scale\030\003 \001(\005\"\245\004\n\010TreeNode\022#"
  "\n\tfieldNode\030\001 \001(\0132\020.types.FieldNode\022#\n\006f"
  "nNode\030\002 \001(\0132\023.types.FunctionNode\022\035\n\006ifNo"
  "de\030\006 \001(\0132\r.types.IfNode\022\037\n\007andNode\030\007 \001(\013"
  "2\016.types.AndNode\022\035\n\006orNode\030\010 \001(\0132\r.types"
  ".OrNode\022!\n\010nullNode\030\013 \001(\0132\017.types.NullNo"
  "de\022\037\n\007intNode\030\014 \001(\0132\016.types.IntNode\022#\n\tf"
  "loatNode\030\r \001(\0132\020.types.FloatNode\022!\n\010long"
  "Node\030\016 \001(\0132\017.types.LongNode\022\'\n\013booleanNo"
  "de\030\017 \001(\0132\022.types.BooleanNode\022%\n\ndoubleNo"
  "de\030\020 \001(\0132\021.types.DoubleNode\022%\n\nstringNod"
  "e\030\021 \001(\0132\021.types.StringNode\022%\n\nbinaryNode"
  "\030\022 \001(\0132\021.types.BinaryNode\022\'\n\013decimalNode"
  "\030\023 \001(\0132\022.types.DecimalNode\022\035\n\006inNode\030\025 \001"
  "(\0132\r.types.InNode\"Q\n\016ExpressionRoot\022\035\n\004r"
  "oot\030\001 \001(\0132\017.types.TreeNode\022 \n\nresultType"
  "\030\002 \001(\0132\014.types.Field\"6\n\016ExpressionList\022$"
  "\n\005exprs\030\002 \003(\0132\025.types.ExpressionRoot\"*\n\t"
  "Condition\022\035\n\004root\030\001 \001(\0132\017.types.TreeNode"
  "\"\'\n\006Schema\022\035\n\007columns\030\001 \003(\0132\014.types.Fiel"
  "d\";\n\020GandivaDataTypes\022\'\n\010dataType\030\001 \003(\0132"
  "\025.types.ExtGandivaType\">\n\020GandivaFunctio"
  "ns\022*\n\010function\030\001 \003(\0132\030.types.FunctionSig"
  "nature\"w\n\021FunctionSignature\022\014\n\004name\030\001 \001("
  "\t\022)\n\nreturnType\030\002 \001(\0132\025.types.ExtGandiva"
  "Type\022)\n\nparamTypes\030\003 \003(\0132\025.types.ExtGand"
  "ivaType\"\327\001\n\006InNode\022\037\n\005field\030\001 \001(\0132\020.type"
  "s.FieldNode\022&\n\tintValues\030\002 \001(\0132\023.types.I"
  "ntConstants\022(\n\nlongValues\030\003 \001(\0132\024.types."
  "LongConstants\022,\n\014stringValues\030\004 \001(\0132\026.ty"
  "pes.StringConstants\022,\n\014binaryValues\030\005 \001("
  "\0132\026.types.BinaryConstants\"1\n\014IntConstant"
  "s\022!\n\tintValues\030\001 \003(\0132\016.types.IntNode\"4\n\r"
  "LongConstants\022#\n\nlongValues\030\001 \003(\0132\017.type"
  "s.LongNode\":\n\017StringConstants\022\'\n\014stringV"
  "alues\030\001 \003(\0132\021.types.StringNode\":\n\017Binary"
  "Constants\022\'\n\014binaryValues\030\001 \003(\0132\021.types."
  "BinaryNode*\343\002\n\013GandivaType\022\010\n\004NONE\020\000\022\010\n\004"
  "BOOL\020\001\022\t\n\005UINT8\020\002\022\010\n\004INT8\020\003\022\n\n\006UINT16\020\004\022"
  "\t\n\005INT16\020\005\022\n\n\006UINT32\020\006\022\t\n\005INT32\020\007\022\n\n\006UIN"
  "T64\020\010\022\t\n\005INT64\020\t\022\016\n\nHALF_FLOAT\020\n\022\t\n\005FLOA"
  "T\020\013\022\n\n\006DOUBLE\020\014\022\010\n\004UTF8\020\r\022\n\n\006BINARY\020\016\022\025\n"
  "\021FIXED_SIZE_BINARY\020\017\022\n\n\006DATE32\020\020\022\n\n\006DATE"
  "64\020\021\022\r\n\tTIMESTAMP\020\022\022\n\n\006TIME32\020\023\022\n\n\006TIME6"
  "4\020\024\022\014\n\010INTERVAL\020\025\022\013\n\007DECIMAL\020\026\022\010\n\004LIST\020\027"
  "\022\n\n\006STRUCT\020\030\022\t\n\005UNION\020\031\022\016\n\nDICTIONARY\020\032\022"
  "\007\n\003MAP\020\033*\036\n\010DateUnit\022\007\n\003DAY\020\000\022\t\n\005MILLI\020\001"
  "*<\n\010TimeUnit\022\007\n\003SEC\020\000\022\014\n\010MILLISEC\020\001\022\014\n\010M"
  "ICROSEC\020\002\022\013\n\007NANOSEC\020\003*>\n\023SelectionVecto"
  "rType\022\013\n\007SV_NONE\020\000\022\014\n\010SV_INT16\020\001\022\014\n\010SV_I"
  "NT32\020\002B.\n\034org.apache.arrow.gandiva.ipcB\014"
  "GandivaTypesH\001"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_Types_2eproto = {
  false, InitDefaults_Types_2eproto, 
  descriptor_table_protodef_Types_2eproto,
  "Types.proto", &assign_descriptors_table_Types_2eproto, 3054,
};

void AddDescriptors_Types_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_Types_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Types_2eproto = []() { AddDescriptors_Types_2eproto(); return true; }();
namespace types {
const ::google::protobuf::EnumDescriptor* GandivaType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_Types_2eproto);
  return file_level_enum_descriptors_Types_2eproto[0];
}
bool GandivaType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DateUnit_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_Types_2eproto);
  return file_level_enum_descriptors_Types_2eproto[1];
}
bool DateUnit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TimeUnit_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_Types_2eproto);
  return file_level_enum_descriptors_Types_2eproto[2];
}
bool TimeUnit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SelectionVectorType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_Types_2eproto);
  return file_level_enum_descriptors_Types_2eproto[3];
}
bool SelectionVectorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ExtGandivaType::InitAsDefaultInstance() {
}
class ExtGandivaType::HasBitSetters {
 public:
  static void set_has_type(ExtGandivaType* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_width(ExtGandivaType* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_precision(ExtGandivaType* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_scale(ExtGandivaType* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_dateunit(ExtGandivaType* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_timeunit(ExtGandivaType* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_timezone(ExtGandivaType* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExtGandivaType::kTypeFieldNumber;
const int ExtGandivaType::kWidthFieldNumber;
const int ExtGandivaType::kPrecisionFieldNumber;
const int ExtGandivaType::kScaleFieldNumber;
const int ExtGandivaType::kDateUnitFieldNumber;
const int ExtGandivaType::kTimeUnitFieldNumber;
const int ExtGandivaType::kTimeZoneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExtGandivaType::ExtGandivaType()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:types.ExtGandivaType)
}
ExtGandivaType::ExtGandivaType(const ExtGandivaType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timezone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_timezone()) {
    timezone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timezone_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeunit_) -
    reinterpret_cast<char*>(&type_)) + sizeof(timeunit_));
  // @@protoc_insertion_point(copy_constructor:types.ExtGandivaType)
}

void ExtGandivaType::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ExtGandivaType_Types_2eproto.base);
  timezone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeunit_) -
      reinterpret_cast<char*>(&type_)) + sizeof(timeunit_));
}

ExtGandivaType::~ExtGandivaType() {
  // @@protoc_insertion_point(destructor:types.ExtGandivaType)
  SharedDtor();
}

void ExtGandivaType::SharedDtor() {
  timezone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ExtGandivaType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExtGandivaType& ExtGandivaType::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ExtGandivaType_Types_2eproto.base);
  return *internal_default_instance();
}


void ExtGandivaType::Clear() {
// @@protoc_insertion_point(message_clear_start:types.ExtGandivaType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    timezone_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timeunit_) -
        reinterpret_cast<char*>(&type_)) + sizeof(timeunit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExtGandivaType::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ExtGandivaType*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .types.GandivaType type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::types::GandivaType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_type(static_cast<::types::GandivaType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 width = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_width(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 precision = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_precision(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 scale = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_scale(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .types.DateUnit dateUnit = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::types::DateUnit_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(5, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_dateunit(static_cast<::types::DateUnit>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .types.TimeUnit timeUnit = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::types::TimeUnit_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(6, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_timeunit(static_cast<::types::TimeUnit>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string timeZone = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("types.ExtGandivaType.timeZone");
        object = msg->mutable_timezone();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExtGandivaType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:types.ExtGandivaType)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .types.GandivaType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::types::GandivaType_IsValid(value)) {
            set_type(static_cast< ::types::GandivaType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_width(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 precision = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_precision(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &precision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 scale = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_scale(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .types.DateUnit dateUnit = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::types::DateUnit_IsValid(value)) {
            set_dateunit(static_cast< ::types::DateUnit >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .types.TimeUnit timeUnit = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::types::TimeUnit_IsValid(value)) {
            set_timeunit(static_cast< ::types::TimeUnit >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string timeZone = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timezone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->timezone().data(), static_cast<int>(this->timezone().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "types.ExtGandivaType.timeZone");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:types.ExtGandivaType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:types.ExtGandivaType)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExtGandivaType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:types.ExtGandivaType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .types.GandivaType type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 width = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->width(), output);
  }

  // optional int32 precision = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->precision(), output);
  }

  // optional int32 scale = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->scale(), output);
  }

  // optional .types.DateUnit dateUnit = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->dateunit(), output);
  }

  // optional .types.TimeUnit timeUnit = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->timeunit(), output);
  }

  // optional string timeZone = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timezone().data(), static_cast<int>(this->timezone().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "types.ExtGandivaType.timeZone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->timezone(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:types.ExtGandivaType)
}

::google::protobuf::uint8* ExtGandivaType::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.ExtGandivaType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .types.GandivaType type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 width = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->width(), target);
  }

  // optional int32 precision = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->precision(), target);
  }

  // optional int32 scale = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->scale(), target);
  }

  // optional .types.DateUnit dateUnit = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->dateunit(), target);
  }

  // optional .types.TimeUnit timeUnit = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->timeunit(), target);
  }

  // optional string timeZone = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timezone().data(), static_cast<int>(this->timezone().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "types.ExtGandivaType.timeZone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->timezone(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.ExtGandivaType)
  return target;
}

size_t ExtGandivaType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.ExtGandivaType)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string timeZone = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timezone());
    }

    // optional .types.GandivaType type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 width = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional int32 precision = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->precision());
    }

    // optional int32 scale = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scale());
    }

    // optional .types.DateUnit dateUnit = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dateunit());
    }

    // optional .types.TimeUnit timeUnit = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->timeunit());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExtGandivaType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:types.ExtGandivaType)
  GOOGLE_DCHECK_NE(&from, this);
  const ExtGandivaType* source =
      ::google::protobuf::DynamicCastToGenerated<ExtGandivaType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:types.ExtGandivaType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:types.ExtGandivaType)
    MergeFrom(*source);
  }
}

void ExtGandivaType::MergeFrom(const ExtGandivaType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.ExtGandivaType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      timezone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timezone_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000008u) {
      precision_ = from.precision_;
    }
    if (cached_has_bits & 0x00000010u) {
      scale_ = from.scale_;
    }
    if (cached_has_bits & 0x00000020u) {
      dateunit_ = from.dateunit_;
    }
    if (cached_has_bits & 0x00000040u) {
      timeunit_ = from.timeunit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ExtGandivaType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:types.ExtGandivaType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtGandivaType::CopyFrom(const ExtGandivaType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.ExtGandivaType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtGandivaType::IsInitialized() const {
  return true;
}

void ExtGandivaType::Swap(ExtGandivaType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExtGandivaType::InternalSwap(ExtGandivaType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  timezone_.Swap(&other->timezone_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(width_, other->width_);
  swap(precision_, other->precision_);
  swap(scale_, other->scale_);
  swap(dateunit_, other->dateunit_);
  swap(timeunit_, other->timeunit_);
}

::google::protobuf::Metadata ExtGandivaType::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Types_2eproto);
  return ::file_level_metadata_Types_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Field::InitAsDefaultInstance() {
  ::types::_Field_default_instance_._instance.get_mutable()->type_ = const_cast< ::types::ExtGandivaType*>(
      ::types::ExtGandivaType::internal_default_instance());
}
class Field::HasBitSetters {
 public:
  static void set_has_name(Field* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::types::ExtGandivaType& type(const Field* msg);
  static void set_has_type(Field* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_nullable(Field* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

const ::types::ExtGandivaType&
Field::HasBitSetters::type(const Field* msg) {
  return *msg->type_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Field::kNameFieldNumber;
const int Field::kTypeFieldNumber;
const int Field::kNullableFieldNumber;
const int Field::kChildrenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Field::Field()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:types.Field)
}
Field::Field(const Field& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      children_(from.children_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_type()) {
    type_ = new ::types::ExtGandivaType(*from.type_);
  } else {
    type_ = nullptr;
  }
  nullable_ = from.nullable_;
  // @@protoc_insertion_point(copy_constructor:types.Field)
}

void Field::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Field_Types_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullable_) -
      reinterpret_cast<char*>(&type_)) + sizeof(nullable_));
}

Field::~Field() {
  // @@protoc_insertion_point(destructor:types.Field)
  SharedDtor();
}

void Field::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete type_;
}

void Field::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Field& Field::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Field_Types_2eproto.base);
  return *internal_default_instance();
}


void Field::Clear() {
// @@protoc_insertion_point(message_clear_start:types.Field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  children_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(type_ != nullptr);
      type_->Clear();
    }
  }
  nullable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Field::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Field*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("types.Field.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional .types.ExtGandivaType type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::types::ExtGandivaType::_InternalParse;
        object = msg->mutable_type();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional bool nullable = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_nullable(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .types.Field children = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::types::Field::_InternalParse;
          object = msg->add_children();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:types.Field)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "types.Field.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .types.ExtGandivaType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool nullable = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_nullable(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &nullable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .types.Field children = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_children()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:types.Field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:types.Field)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:types.Field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "types.Field.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .types.ExtGandivaType type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::type(this), output);
  }

  // optional bool nullable = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->nullable(), output);
  }

  // repeated .types.Field children = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->children_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->children(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:types.Field)
}

::google::protobuf::uint8* Field::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.Field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "types.Field.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .types.ExtGandivaType type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::type(this), target);
  }

  // optional bool nullable = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->nullable(), target);
  }

  // repeated .types.Field children = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->children_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->children(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.Field)
  return target;
}

size_t Field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.Field)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .types.Field children = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->children_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->children(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .types.ExtGandivaType type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_);
    }

    // optional bool nullable = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:types.Field)
  GOOGLE_DCHECK_NE(&from, this);
  const Field* source =
      ::google::protobuf::DynamicCastToGenerated<Field>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:types.Field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:types.Field)
    MergeFrom(*source);
  }
}

void Field::MergeFrom(const Field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.Field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  children_.MergeFrom(from.children_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_type()->::types::ExtGandivaType::MergeFrom(from.type());
    }
    if (cached_has_bits & 0x00000004u) {
      nullable_ = from.nullable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:types.Field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Field::CopyFrom(const Field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.Field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Field::IsInitialized() const {
  return true;
}

void Field::Swap(Field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Field::InternalSwap(Field* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&children_)->InternalSwap(CastToBase(&other->children_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(nullable_, other->nullable_);
}

::google::protobuf::Metadata Field::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Types_2eproto);
  return ::file_level_metadata_Types_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FieldNode::InitAsDefaultInstance() {
  ::types::_FieldNode_default_instance_._instance.get_mutable()->field_ = const_cast< ::types::Field*>(
      ::types::Field::internal_default_instance());
}
class FieldNode::HasBitSetters {
 public:
  static const ::types::Field& field(const FieldNode* msg);
  static void set_has_field(FieldNode* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::types::Field&
FieldNode::HasBitSetters::field(const FieldNode* msg) {
  return *msg->field_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FieldNode::kFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FieldNode::FieldNode()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:types.FieldNode)
}
FieldNode::FieldNode(const FieldNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_field()) {
    field_ = new ::types::Field(*from.field_);
  } else {
    field_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:types.FieldNode)
}

void FieldNode::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FieldNode_Types_2eproto.base);
  field_ = nullptr;
}

FieldNode::~FieldNode() {
  // @@protoc_insertion_point(destructor:types.FieldNode)
  SharedDtor();
}

void FieldNode::SharedDtor() {
  if (this != internal_default_instance()) delete field_;
}

void FieldNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FieldNode& FieldNode::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FieldNode_Types_2eproto.base);
  return *internal_default_instance();
}


void FieldNode::Clear() {
// @@protoc_insertion_point(message_clear_start:types.FieldNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(field_ != nullptr);
    field_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FieldNode::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FieldNode*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .types.Field field = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::types::Field::_InternalParse;
        object = msg->mutable_field();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FieldNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:types.FieldNode)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .types.Field field = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:types.FieldNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:types.FieldNode)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FieldNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:types.FieldNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .types.Field field = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::field(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:types.FieldNode)
}

::google::protobuf::uint8* FieldNode::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.FieldNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .types.Field field = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::field(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.FieldNode)
  return target;
}

size_t FieldNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.FieldNode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .types.Field field = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *field_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FieldNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:types.FieldNode)
  GOOGLE_DCHECK_NE(&from, this);
  const FieldNode* source =
      ::google::protobuf::DynamicCastToGenerated<FieldNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:types.FieldNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:types.FieldNode)
    MergeFrom(*source);
  }
}

void FieldNode::MergeFrom(const FieldNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.FieldNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_field()) {
    mutable_field()->::types::Field::MergeFrom(from.field());
  }
}

void FieldNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:types.FieldNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldNode::CopyFrom(const FieldNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.FieldNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldNode::IsInitialized() const {
  return true;
}

void FieldNode::Swap(FieldNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FieldNode::InternalSwap(FieldNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(field_, other->field_);
}

::google::protobuf::Metadata FieldNode::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Types_2eproto);
  return ::file_level_metadata_Types_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FunctionNode::InitAsDefaultInstance() {
  ::types::_FunctionNode_default_instance_._instance.get_mutable()->returntype_ = const_cast< ::types::ExtGandivaType*>(
      ::types::ExtGandivaType::internal_default_instance());
}
class FunctionNode::HasBitSetters {
 public:
  static void set_has_functionname(FunctionNode* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::types::ExtGandivaType& returntype(const FunctionNode* msg);
  static void set_has_returntype(FunctionNode* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::types::ExtGandivaType&
FunctionNode::HasBitSetters::returntype(const FunctionNode* msg) {
  return *msg->returntype_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FunctionNode::kFunctionNameFieldNumber;
const int FunctionNode::kInArgsFieldNumber;
const int FunctionNode::kReturnTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FunctionNode::FunctionNode()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:types.FunctionNode)
}
FunctionNode::FunctionNode(const FunctionNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      inargs_(from.inargs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  functionname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_functionname()) {
    functionname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.functionname_);
  }
  if (from.has_returntype()) {
    returntype_ = new ::types::ExtGandivaType(*from.returntype_);
  } else {
    returntype_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:types.FunctionNode)
}

void FunctionNode::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AndNode_Types_2eproto.base);
  functionname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  returntype_ = nullptr;
}

FunctionNode::~FunctionNode() {
  // @@protoc_insertion_point(destructor:types.FunctionNode)
  SharedDtor();
}

void FunctionNode::SharedDtor() {
  functionname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete returntype_;
}

void FunctionNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FunctionNode& FunctionNode::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AndNode_Types_2eproto.base);
  return *internal_default_instance();
}


void FunctionNode::Clear() {
// @@protoc_insertion_point(message_clear_start:types.FunctionNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inargs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      functionname_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(returntype_ != nullptr);
      returntype_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FunctionNode::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FunctionNode*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string functionName = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("types.FunctionNode.functionName");
        object = msg->mutable_functionname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .types.TreeNode inArgs = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::types::TreeNode::_InternalParse;
          object = msg->add_inargs();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // optional .types.ExtGandivaType returnType = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::types::ExtGandivaType::_InternalParse;
        object = msg->mutable_returntype();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FunctionNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:types.FunctionNode)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string functionName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_functionname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->functionname().data(), static_cast<int>(this->functionname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "types.FunctionNode.functionName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .types.TreeNode inArgs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_inargs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .types.ExtGandivaType returnType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_returntype()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:types.FunctionNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:types.FunctionNode)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FunctionNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:types.FunctionNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string functionName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->functionname().data(), static_cast<int>(this->functionname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "types.FunctionNode.functionName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->functionname(), output);
  }

  // repeated .types.TreeNode inArgs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inargs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->inargs(static_cast<int>(i)),
      output);
  }

  // optional .types.ExtGandivaType returnType = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::returntype(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:types.FunctionNode)
}

::google::protobuf::uint8* FunctionNode::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.FunctionNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string functionName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->functionname().data(), static_cast<int>(this->functionname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "types.FunctionNode.functionName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->functionname(), target);
  }

  // repeated .types.TreeNode inArgs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inargs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->inargs(static_cast<int>(i)), target);
  }

  // optional .types.ExtGandivaType returnType = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::returntype(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.FunctionNode)
  return target;
}

size_t FunctionNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.FunctionNode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .types.TreeNode inArgs = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->inargs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->inargs(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string functionName = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->functionname());
    }

    // optional .types.ExtGandivaType returnType = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *returntype_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FunctionNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:types.FunctionNode)
  GOOGLE_DCHECK_NE(&from, this);
  const FunctionNode* source =
      ::google::protobuf::DynamicCastToGenerated<FunctionNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:types.FunctionNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:types.FunctionNode)
    MergeFrom(*source);
  }
}

void FunctionNode::MergeFrom(const FunctionNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.FunctionNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inargs_.MergeFrom(from.inargs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      functionname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.functionname_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_returntype()->::types::ExtGandivaType::MergeFrom(from.returntype());
    }
  }
}

void FunctionNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:types.FunctionNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionNode::CopyFrom(const FunctionNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.FunctionNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionNode::IsInitialized() const {
  return true;
}

void FunctionNode::Swap(FunctionNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FunctionNode::InternalSwap(FunctionNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&inargs_)->InternalSwap(CastToBase(&other->inargs_));
  functionname_.Swap(&other->functionname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(returntype_, other->returntype_);
}

::google::protobuf::Metadata FunctionNode::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Types_2eproto);
  return ::file_level_metadata_Types_2eproto[kIndexInFileMessages];
}


// ===================================================================

void IfNode::InitAsDefaultInstance() {
  ::types::_IfNode_default_instance_._instance.get_mutable()->cond_ = const_cast< ::types::TreeNode*>(
      ::types::TreeNode::internal_default_instance());
  ::types::_IfNode_default_instance_._instance.get_mutable()->thennode_ = const_cast< ::types::TreeNode*>(
      ::types::TreeNode::internal_default_instance());
  ::types::_IfNode_default_instance_._instance.get_mutable()->elsenode_ = const_cast< ::types::TreeNode*>(
      ::types::TreeNode::internal_default_instance());
  ::types::_IfNode_default_instance_._instance.get_mutable()->returntype_ = const_cast< ::types::ExtGandivaType*>(
      ::types::ExtGandivaType::internal_default_instance());
}
class IfNode::HasBitSetters {
 public:
  static const ::types::TreeNode& cond(const IfNode* msg);
  static void set_has_cond(IfNode* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::types::TreeNode& thennode(const IfNode* msg);
  static void set_has_thennode(IfNode* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::types::TreeNode& elsenode(const IfNode* msg);
  static void set_has_elsenode(IfNode* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::types::ExtGandivaType& returntype(const IfNode* msg);
  static void set_has_returntype(IfNode* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

const ::types::TreeNode&
IfNode::HasBitSetters::cond(const IfNode* msg) {
  return *msg->cond_;
}
const ::types::TreeNode&
IfNode::HasBitSetters::thennode(const IfNode* msg) {
  return *msg->thennode_;
}
const ::types::TreeNode&
IfNode::HasBitSetters::elsenode(const IfNode* msg) {
  return *msg->elsenode_;
}
const ::types::ExtGandivaType&
IfNode::HasBitSetters::returntype(const IfNode* msg) {
  return *msg->returntype_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IfNode::kCondFieldNumber;
const int IfNode::kThenNodeFieldNumber;
const int IfNode::kElseNodeFieldNumber;
const int IfNode::kReturnTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IfNode::IfNode()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:types.IfNode)
}
IfNode::IfNode(const IfNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cond()) {
    cond_ = new ::types::TreeNode(*from.cond_);
  } else {
    cond_ = nullptr;
  }
  if (from.has_thennode()) {
    thennode_ = new ::types::TreeNode(*from.thennode_);
  } else {
    thennode_ = nullptr;
  }
  if (from.has_elsenode()) {
    elsenode_ = new ::types::TreeNode(*from.elsenode_);
  } else {
    elsenode_ = nullptr;
  }
  if (from.has_returntype()) {
    returntype_ = new ::types::ExtGandivaType(*from.returntype_);
  } else {
    returntype_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:types.IfNode)
}

void IfNode::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AndNode_Types_2eproto.base);
  ::memset(&cond_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&returntype_) -
      reinterpret_cast<char*>(&cond_)) + sizeof(returntype_));
}

IfNode::~IfNode() {
  // @@protoc_insertion_point(destructor:types.IfNode)
  SharedDtor();
}

void IfNode::SharedDtor() {
  if (this != internal_default_instance()) delete cond_;
  if (this != internal_default_instance()) delete thennode_;
  if (this != internal_default_instance()) delete elsenode_;
  if (this != internal_default_instance()) delete returntype_;
}

void IfNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IfNode& IfNode::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AndNode_Types_2eproto.base);
  return *internal_default_instance();
}


void IfNode::Clear() {
// @@protoc_insertion_point(message_clear_start:types.IfNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(cond_ != nullptr);
      cond_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(thennode_ != nullptr);
      thennode_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(elsenode_ != nullptr);
      elsenode_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(returntype_ != nullptr);
      returntype_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IfNode::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<IfNode*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .types.TreeNode cond = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::types::TreeNode::_InternalParse;
        object = msg->mutable_cond();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .types.TreeNode thenNode = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::types::TreeNode::_InternalParse;
        object = msg->mutable_thennode();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .types.TreeNode elseNode = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::types::TreeNode::_InternalParse;
        object = msg->mutable_elsenode();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .types.ExtGandivaType returnType = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::types::ExtGandivaType::_InternalParse;
        object = msg->mutable_returntype();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IfNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:types.IfNode)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .types.TreeNode cond = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cond()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .types.TreeNode thenNode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_thennode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .types.TreeNode elseNode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_elsenode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .types.ExtGandivaType returnType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_returntype()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:types.IfNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:types.IfNode)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IfNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:types.IfNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .types.TreeNode cond = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::cond(this), output);
  }

  // optional .types.TreeNode thenNode = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::thennode(this), output);
  }

  // optional .types.TreeNode elseNode = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::elsenode(this), output);
  }

  // optional .types.ExtGandivaType returnType = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::returntype(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:types.IfNode)
}

::google::protobuf::uint8* IfNode::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.IfNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .types.TreeNode cond = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::cond(this), target);
  }

  // optional .types.TreeNode thenNode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::thennode(this), target);
  }

  // optional .types.TreeNode elseNode = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::elsenode(this), target);
  }

  // optional .types.ExtGandivaType returnType = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::returntype(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.IfNode)
  return target;
}

size_t IfNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.IfNode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .types.TreeNode cond = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *cond_);
    }

    // optional .types.TreeNode thenNode = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *thennode_);
    }

    // optional .types.TreeNode elseNode = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *elsenode_);
    }

    // optional .types.ExtGandivaType returnType = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *returntype_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IfNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:types.IfNode)
  GOOGLE_DCHECK_NE(&from, this);
  const IfNode* source =
      ::google::protobuf::DynamicCastToGenerated<IfNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:types.IfNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:types.IfNode)
    MergeFrom(*source);
  }
}

void IfNode::MergeFrom(const IfNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.IfNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_cond()->::types::TreeNode::MergeFrom(from.cond());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_thennode()->::types::TreeNode::MergeFrom(from.thennode());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_elsenode()->::types::TreeNode::MergeFrom(from.elsenode());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_returntype()->::types::ExtGandivaType::MergeFrom(from.returntype());
    }
  }
}

void IfNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:types.IfNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IfNode::CopyFrom(const IfNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.IfNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IfNode::IsInitialized() const {
  return true;
}

void IfNode::Swap(IfNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IfNode::InternalSwap(IfNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cond_, other->cond_);
  swap(thennode_, other->thennode_);
  swap(elsenode_, other->elsenode_);
  swap(returntype_, other->returntype_);
}

::google::protobuf::Metadata IfNode::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Types_2eproto);
  return ::file_level_metadata_Types_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AndNode::InitAsDefaultInstance() {
}
class AndNode::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AndNode::kArgsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AndNode::AndNode()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:types.AndNode)
}
AndNode::AndNode(const AndNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      args_(from.args_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:types.AndNode)
}

void AndNode::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AndNode_Types_2eproto.base);
}

AndNode::~AndNode() {
  // @@protoc_insertion_point(destructor:types.AndNode)
  SharedDtor();
}

void AndNode::SharedDtor() {
}

void AndNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AndNode& AndNode::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AndNode_Types_2eproto.base);
  return *internal_default_instance();
}


void AndNode::Clear() {
// @@protoc_insertion_point(message_clear_start:types.AndNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AndNode::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AndNode*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .types.TreeNode args = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::types::TreeNode::_InternalParse;
          object = msg->add_args();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AndNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:types.AndNode)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .types.TreeNode args = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_args()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:types.AndNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:types.AndNode)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AndNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:types.AndNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .types.TreeNode args = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->args_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->args(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:types.AndNode)
}

::google::protobuf::uint8* AndNode::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.AndNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .types.TreeNode args = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->args_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->args(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.AndNode)
  return target;
}

size_t AndNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.AndNode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .types.TreeNode args = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->args_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->args(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AndNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:types.AndNode)
  GOOGLE_DCHECK_NE(&from, this);
  const AndNode* source =
      ::google::protobuf::DynamicCastToGenerated<AndNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:types.AndNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:types.AndNode)
    MergeFrom(*source);
  }
}

void AndNode::MergeFrom(const AndNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.AndNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_.MergeFrom(from.args_);
}

void AndNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:types.AndNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AndNode::CopyFrom(const AndNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.AndNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndNode::IsInitialized() const {
  return true;
}

void AndNode::Swap(AndNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AndNode::InternalSwap(AndNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&args_)->InternalSwap(CastToBase(&other->args_));
}

::google::protobuf::Metadata AndNode::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Types_2eproto);
  return ::file_level_metadata_Types_2eproto[kIndexInFileMessages];
}


// ===================================================================

void OrNode::InitAsDefaultInstance() {
}
class OrNode::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrNode::kArgsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrNode::OrNode()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:types.OrNode)
}
OrNode::OrNode(const OrNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      args_(from.args_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:types.OrNode)
}

void OrNode::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AndNode_Types_2eproto.base);
}

OrNode::~OrNode() {
  // @@protoc_insertion_point(destructor:types.OrNode)
  SharedDtor();
}

void OrNode::SharedDtor() {
}

void OrNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrNode& OrNode::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AndNode_Types_2eproto.base);
  return *internal_default_instance();
}


void OrNode::Clear() {
// @@protoc_insertion_point(message_clear_start:types.OrNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OrNode::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<OrNode*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .types.TreeNode args = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::types::TreeNode::_InternalParse;
          object = msg->add_args();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OrNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:types.OrNode)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .types.TreeNode args = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_args()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:types.OrNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:types.OrNode)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OrNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:types.OrNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .types.TreeNode args = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->args_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->args(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:types.OrNode)
}

::google::protobuf::uint8* OrNode::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.OrNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .types.TreeNode args = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->args_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->args(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.OrNode)
  return target;
}

size_t OrNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.OrNode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .types.TreeNode args = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->args_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->args(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:types.OrNode)
  GOOGLE_DCHECK_NE(&from, this);
  const OrNode* source =
      ::google::protobuf::DynamicCastToGenerated<OrNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:types.OrNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:types.OrNode)
    MergeFrom(*source);
  }
}

void OrNode::MergeFrom(const OrNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.OrNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_.MergeFrom(from.args_);
}

void OrNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:types.OrNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrNode::CopyFrom(const OrNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.OrNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrNode::IsInitialized() const {
  return true;
}

void OrNode::Swap(OrNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrNode::InternalSwap(OrNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&args_)->InternalSwap(CastToBase(&other->args_));
}

::google::protobuf::Metadata OrNode::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Types_2eproto);
  return ::file_level_metadata_Types_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NullNode::InitAsDefaultInstance() {
  ::types::_NullNode_default_instance_._instance.get_mutable()->type_ = const_cast< ::types::ExtGandivaType*>(
      ::types::ExtGandivaType::internal_default_instance());
}
class NullNode::HasBitSetters {
 public:
  static const ::types::ExtGandivaType& type(const NullNode* msg);
  static void set_has_type(NullNode* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::types::ExtGandivaType&
NullNode::HasBitSetters::type(const NullNode* msg) {
  return *msg->type_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NullNode::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NullNode::NullNode()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:types.NullNode)
}
NullNode::NullNode(const NullNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_type()) {
    type_ = new ::types::ExtGandivaType(*from.type_);
  } else {
    type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:types.NullNode)
}

void NullNode::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NullNode_Types_2eproto.base);
  type_ = nullptr;
}

NullNode::~NullNode() {
  // @@protoc_insertion_point(destructor:types.NullNode)
  SharedDtor();
}

void NullNode::SharedDtor() {
  if (this != internal_default_instance()) delete type_;
}

void NullNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NullNode& NullNode::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NullNode_Types_2eproto.base);
  return *internal_default_instance();
}


void NullNode::Clear() {
// @@protoc_insertion_point(message_clear_start:types.NullNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(type_ != nullptr);
    type_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NullNode::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NullNode*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .types.ExtGandivaType type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::types::ExtGandivaType::_InternalParse;
        object = msg->mutable_type();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NullNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:types.NullNode)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .types.ExtGandivaType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:types.NullNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:types.NullNode)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NullNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:types.NullNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .types.ExtGandivaType type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::type(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:types.NullNode)
}

::google::protobuf::uint8* NullNode::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.NullNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .types.ExtGandivaType type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::type(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.NullNode)
  return target;
}

size_t NullNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.NullNode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .types.ExtGandivaType type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *type_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NullNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:types.NullNode)
  GOOGLE_DCHECK_NE(&from, this);
  const NullNode* source =
      ::google::protobuf::DynamicCastToGenerated<NullNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:types.NullNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:types.NullNode)
    MergeFrom(*source);
  }
}

void NullNode::MergeFrom(const NullNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.NullNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_type()) {
    mutable_type()->::types::ExtGandivaType::MergeFrom(from.type());
  }
}

void NullNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:types.NullNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NullNode::CopyFrom(const NullNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.NullNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NullNode::IsInitialized() const {
  return true;
}

void NullNode::Swap(NullNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NullNode::InternalSwap(NullNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(type_, other->type_);
}

::google::protobuf::Metadata NullNode::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Types_2eproto);
  return ::file_level_metadata_Types_2eproto[kIndexInFileMessages];
}


// ===================================================================

void IntNode::InitAsDefaultInstance() {
}
class IntNode::HasBitSetters {
 public:
  static void set_has_value(IntNode* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IntNode::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IntNode::IntNode()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:types.IntNode)
}
IntNode::IntNode(const IntNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:types.IntNode)
}

void IntNode::SharedCtor() {
  value_ = 0;
}

IntNode::~IntNode() {
  // @@protoc_insertion_point(destructor:types.IntNode)
  SharedDtor();
}

void IntNode::SharedDtor() {
}

void IntNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntNode& IntNode::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_IntNode_Types_2eproto.base);
  return *internal_default_instance();
}


void IntNode::Clear() {
// @@protoc_insertion_point(message_clear_start:types.IntNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IntNode::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<IntNode*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 value = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IntNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:types.IntNode)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:types.IntNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:types.IntNode)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IntNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:types.IntNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:types.IntNode)
}

::google::protobuf::uint8* IntNode::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.IntNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.IntNode)
  return target;
}

size_t IntNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.IntNode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:types.IntNode)
  GOOGLE_DCHECK_NE(&from, this);
  const IntNode* source =
      ::google::protobuf::DynamicCastToGenerated<IntNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:types.IntNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:types.IntNode)
    MergeFrom(*source);
  }
}

void IntNode::MergeFrom(const IntNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.IntNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_value()) {
    set_value(from.value());
  }
}

void IntNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:types.IntNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntNode::CopyFrom(const IntNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.IntNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntNode::IsInitialized() const {
  return true;
}

void IntNode::Swap(IntNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IntNode::InternalSwap(IntNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(value_, other->value_);
}

::google::protobuf::Metadata IntNode::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Types_2eproto);
  return ::file_level_metadata_Types_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FloatNode::InitAsDefaultInstance() {
}
class FloatNode::HasBitSetters {
 public:
  static void set_has_value(FloatNode* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FloatNode::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FloatNode::FloatNode()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:types.FloatNode)
}
FloatNode::FloatNode(const FloatNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:types.FloatNode)
}

void FloatNode::SharedCtor() {
  value_ = 0;
}

FloatNode::~FloatNode() {
  // @@protoc_insertion_point(destructor:types.FloatNode)
  SharedDtor();
}

void FloatNode::SharedDtor() {
}

void FloatNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FloatNode& FloatNode::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FloatNode_Types_2eproto.base);
  return *internal_default_instance();
}


void FloatNode::Clear() {
// @@protoc_insertion_point(message_clear_start:types.FloatNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FloatNode::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FloatNode*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional float value = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_value(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FloatNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:types.FloatNode)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:types.FloatNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:types.FloatNode)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FloatNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:types.FloatNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:types.FloatNode)
}

::google::protobuf::uint8* FloatNode::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.FloatNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.FloatNode)
  return target;
}

size_t FloatNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.FloatNode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FloatNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:types.FloatNode)
  GOOGLE_DCHECK_NE(&from, this);
  const FloatNode* source =
      ::google::protobuf::DynamicCastToGenerated<FloatNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:types.FloatNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:types.FloatNode)
    MergeFrom(*source);
  }
}

void FloatNode::MergeFrom(const FloatNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.FloatNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_value()) {
    set_value(from.value());
  }
}

void FloatNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:types.FloatNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatNode::CopyFrom(const FloatNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.FloatNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatNode::IsInitialized() const {
  return true;
}

void FloatNode::Swap(FloatNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FloatNode::InternalSwap(FloatNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(value_, other->value_);
}

::google::protobuf::Metadata FloatNode::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Types_2eproto);
  return ::file_level_metadata_Types_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DoubleNode::InitAsDefaultInstance() {
}
class DoubleNode::HasBitSetters {
 public:
  static void set_has_value(DoubleNode* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DoubleNode::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DoubleNode::DoubleNode()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:types.DoubleNode)
}
DoubleNode::DoubleNode(const DoubleNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:types.DoubleNode)
}

void DoubleNode::SharedCtor() {
  value_ = 0;
}

DoubleNode::~DoubleNode() {
  // @@protoc_insertion_point(destructor:types.DoubleNode)
  SharedDtor();
}

void DoubleNode::SharedDtor() {
}

void DoubleNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DoubleNode& DoubleNode::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DoubleNode_Types_2eproto.base);
  return *internal_default_instance();
}


void DoubleNode::Clear() {
// @@protoc_insertion_point(message_clear_start:types.DoubleNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DoubleNode::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DoubleNode*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional double value = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_value(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DoubleNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:types.DoubleNode)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:types.DoubleNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:types.DoubleNode)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DoubleNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:types.DoubleNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:types.DoubleNode)
}

::google::protobuf::uint8* DoubleNode::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.DoubleNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.DoubleNode)
  return target;
}

size_t DoubleNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.DoubleNode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoubleNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:types.DoubleNode)
  GOOGLE_DCHECK_NE(&from, this);
  const DoubleNode* source =
      ::google::protobuf::DynamicCastToGenerated<DoubleNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:types.DoubleNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:types.DoubleNode)
    MergeFrom(*source);
  }
}

void DoubleNode::MergeFrom(const DoubleNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.DoubleNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_value()) {
    set_value(from.value());
  }
}

void DoubleNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:types.DoubleNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleNode::CopyFrom(const DoubleNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.DoubleNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleNode::IsInitialized() const {
  return true;
}

void DoubleNode::Swap(DoubleNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DoubleNode::InternalSwap(DoubleNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(value_, other->value_);
}

::google::protobuf::Metadata DoubleNode::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Types_2eproto);
  return ::file_level_metadata_Types_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BooleanNode::InitAsDefaultInstance() {
}
class BooleanNode::HasBitSetters {
 public:
  static void set_has_value(BooleanNode* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BooleanNode::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BooleanNode::BooleanNode()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:types.BooleanNode)
}
BooleanNode::BooleanNode(const BooleanNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:types.BooleanNode)
}

void BooleanNode::SharedCtor() {
  value_ = false;
}

BooleanNode::~BooleanNode() {
  // @@protoc_insertion_point(destructor:types.BooleanNode)
  SharedDtor();
}

void BooleanNode::SharedDtor() {
}

void BooleanNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BooleanNode& BooleanNode::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BooleanNode_Types_2eproto.base);
  return *internal_default_instance();
}


void BooleanNode::Clear() {
// @@protoc_insertion_point(message_clear_start:types.BooleanNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BooleanNode::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BooleanNode*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool value = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BooleanNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:types.BooleanNode)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:types.BooleanNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:types.BooleanNode)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BooleanNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:types.BooleanNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:types.BooleanNode)
}

::google::protobuf::uint8* BooleanNode::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.BooleanNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.BooleanNode)
  return target;
}

size_t BooleanNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.BooleanNode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BooleanNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:types.BooleanNode)
  GOOGLE_DCHECK_NE(&from, this);
  const BooleanNode* source =
      ::google::protobuf::DynamicCastToGenerated<BooleanNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:types.BooleanNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:types.BooleanNode)
    MergeFrom(*source);
  }
}

void BooleanNode::MergeFrom(const BooleanNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.BooleanNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_value()) {
    set_value(from.value());
  }
}

void BooleanNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:types.BooleanNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BooleanNode::CopyFrom(const BooleanNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.BooleanNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BooleanNode::IsInitialized() const {
  return true;
}

void BooleanNode::Swap(BooleanNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BooleanNode::InternalSwap(BooleanNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(value_, other->value_);
}

::google::protobuf::Metadata BooleanNode::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Types_2eproto);
  return ::file_level_metadata_Types_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LongNode::InitAsDefaultInstance() {
}
class LongNode::HasBitSetters {
 public:
  static void set_has_value(LongNode* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LongNode::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LongNode::LongNode()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:types.LongNode)
}
LongNode::LongNode(const LongNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:types.LongNode)
}

void LongNode::SharedCtor() {
  value_ = PROTOBUF_LONGLONG(0);
}

LongNode::~LongNode() {
  // @@protoc_insertion_point(destructor:types.LongNode)
  SharedDtor();
}

void LongNode::SharedDtor() {
}

void LongNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LongNode& LongNode::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LongNode_Types_2eproto.base);
  return *internal_default_instance();
}


void LongNode::Clear() {
// @@protoc_insertion_point(message_clear_start:types.LongNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LongNode::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LongNode*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int64 value = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LongNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:types.LongNode)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:types.LongNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:types.LongNode)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LongNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:types.LongNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:types.LongNode)
}

::google::protobuf::uint8* LongNode::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.LongNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.LongNode)
  return target;
}

size_t LongNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.LongNode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LongNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:types.LongNode)
  GOOGLE_DCHECK_NE(&from, this);
  const LongNode* source =
      ::google::protobuf::DynamicCastToGenerated<LongNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:types.LongNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:types.LongNode)
    MergeFrom(*source);
  }
}

void LongNode::MergeFrom(const LongNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.LongNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_value()) {
    set_value(from.value());
  }
}

void LongNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:types.LongNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LongNode::CopyFrom(const LongNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.LongNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LongNode::IsInitialized() const {
  return true;
}

void LongNode::Swap(LongNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LongNode::InternalSwap(LongNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(value_, other->value_);
}

::google::protobuf::Metadata LongNode::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Types_2eproto);
  return ::file_level_metadata_Types_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StringNode::InitAsDefaultInstance() {
}
class StringNode::HasBitSetters {
 public:
  static void set_has_value(StringNode* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StringNode::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StringNode::StringNode()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:types.StringNode)
}
StringNode::StringNode(const StringNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:types.StringNode)
}

void StringNode::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StringNode_Types_2eproto.base);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

StringNode::~StringNode() {
  // @@protoc_insertion_point(destructor:types.StringNode)
  SharedDtor();
}

void StringNode::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StringNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StringNode& StringNode::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StringNode_Types_2eproto.base);
  return *internal_default_instance();
}


void StringNode::Clear() {
// @@protoc_insertion_point(message_clear_start:types.StringNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    value_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StringNode::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StringNode*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes value = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StringNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:types.StringNode)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:types.StringNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:types.StringNode)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StringNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:types.StringNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:types.StringNode)
}

::google::protobuf::uint8* StringNode::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.StringNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes value = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.StringNode)
  return target;
}

size_t StringNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.StringNode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StringNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:types.StringNode)
  GOOGLE_DCHECK_NE(&from, this);
  const StringNode* source =
      ::google::protobuf::DynamicCastToGenerated<StringNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:types.StringNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:types.StringNode)
    MergeFrom(*source);
  }
}

void StringNode::MergeFrom(const StringNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.StringNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_value()) {
    _has_bits_[0] |= 0x00000001u;
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void StringNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:types.StringNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringNode::CopyFrom(const StringNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.StringNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringNode::IsInitialized() const {
  return true;
}

void StringNode::Swap(StringNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StringNode::InternalSwap(StringNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata StringNode::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Types_2eproto);
  return ::file_level_metadata_Types_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BinaryNode::InitAsDefaultInstance() {
}
class BinaryNode::HasBitSetters {
 public:
  static void set_has_value(BinaryNode* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BinaryNode::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BinaryNode::BinaryNode()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:types.BinaryNode)
}
BinaryNode::BinaryNode(const BinaryNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:types.BinaryNode)
}

void BinaryNode::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BinaryNode_Types_2eproto.base);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BinaryNode::~BinaryNode() {
  // @@protoc_insertion_point(destructor:types.BinaryNode)
  SharedDtor();
}

void BinaryNode::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BinaryNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BinaryNode& BinaryNode::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BinaryNode_Types_2eproto.base);
  return *internal_default_instance();
}


void BinaryNode::Clear() {
// @@protoc_insertion_point(message_clear_start:types.BinaryNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    value_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BinaryNode::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BinaryNode*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes value = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BinaryNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:types.BinaryNode)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:types.BinaryNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:types.BinaryNode)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BinaryNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:types.BinaryNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:types.BinaryNode)
}

::google::protobuf::uint8* BinaryNode::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.BinaryNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes value = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.BinaryNode)
  return target;
}

size_t BinaryNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.BinaryNode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinaryNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:types.BinaryNode)
  GOOGLE_DCHECK_NE(&from, this);
  const BinaryNode* source =
      ::google::protobuf::DynamicCastToGenerated<BinaryNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:types.BinaryNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:types.BinaryNode)
    MergeFrom(*source);
  }
}

void BinaryNode::MergeFrom(const BinaryNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.BinaryNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_value()) {
    _has_bits_[0] |= 0x00000001u;
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void BinaryNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:types.BinaryNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinaryNode::CopyFrom(const BinaryNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.BinaryNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryNode::IsInitialized() const {
  return true;
}

void BinaryNode::Swap(BinaryNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BinaryNode::InternalSwap(BinaryNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata BinaryNode::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Types_2eproto);
  return ::file_level_metadata_Types_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DecimalNode::InitAsDefaultInstance() {
}
class DecimalNode::HasBitSetters {
 public:
  static void set_has_value(DecimalNode* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_precision(DecimalNode* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_scale(DecimalNode* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DecimalNode::kValueFieldNumber;
const int DecimalNode::kPrecisionFieldNumber;
const int DecimalNode::kScaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DecimalNode::DecimalNode()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:types.DecimalNode)
}
DecimalNode::DecimalNode(const DecimalNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  ::memcpy(&precision_, &from.precision_,
    static_cast<size_t>(reinterpret_cast<char*>(&scale_) -
    reinterpret_cast<char*>(&precision_)) + sizeof(scale_));
  // @@protoc_insertion_point(copy_constructor:types.DecimalNode)
}

void DecimalNode::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DecimalNode_Types_2eproto.base);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&precision_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scale_) -
      reinterpret_cast<char*>(&precision_)) + sizeof(scale_));
}

DecimalNode::~DecimalNode() {
  // @@protoc_insertion_point(destructor:types.DecimalNode)
  SharedDtor();
}

void DecimalNode::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DecimalNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DecimalNode& DecimalNode::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DecimalNode_Types_2eproto.base);
  return *internal_default_instance();
}


void DecimalNode::Clear() {
// @@protoc_insertion_point(message_clear_start:types.DecimalNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    value_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&precision_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&scale_) -
        reinterpret_cast<char*>(&precision_)) + sizeof(scale_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DecimalNode::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DecimalNode*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string value = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("types.DecimalNode.value");
        object = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int32 precision = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_precision(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 scale = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_scale(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DecimalNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:types.DecimalNode)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "types.DecimalNode.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 precision = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_precision(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &precision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 scale = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_scale(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:types.DecimalNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:types.DecimalNode)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DecimalNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:types.DecimalNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "types.DecimalNode.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->value(), output);
  }

  // optional int32 precision = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->precision(), output);
  }

  // optional int32 scale = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->scale(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:types.DecimalNode)
}

::google::protobuf::uint8* DecimalNode::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.DecimalNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "types.DecimalNode.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }

  // optional int32 precision = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->precision(), target);
  }

  // optional int32 scale = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->scale(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.DecimalNode)
  return target;
}

size_t DecimalNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.DecimalNode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string value = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional int32 precision = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->precision());
    }

    // optional int32 scale = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scale());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DecimalNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:types.DecimalNode)
  GOOGLE_DCHECK_NE(&from, this);
  const DecimalNode* source =
      ::google::protobuf::DynamicCastToGenerated<DecimalNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:types.DecimalNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:types.DecimalNode)
    MergeFrom(*source);
  }
}

void DecimalNode::MergeFrom(const DecimalNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.DecimalNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (cached_has_bits & 0x00000002u) {
      precision_ = from.precision_;
    }
    if (cached_has_bits & 0x00000004u) {
      scale_ = from.scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DecimalNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:types.DecimalNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecimalNode::CopyFrom(const DecimalNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.DecimalNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecimalNode::IsInitialized() const {
  return true;
}

void DecimalNode::Swap(DecimalNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DecimalNode::InternalSwap(DecimalNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(precision_, other->precision_);
  swap(scale_, other->scale_);
}

::google::protobuf::Metadata DecimalNode::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Types_2eproto);
  return ::file_level_metadata_Types_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TreeNode::InitAsDefaultInstance() {
  ::types::_TreeNode_default_instance_._instance.get_mutable()->fieldnode_ = const_cast< ::types::FieldNode*>(
      ::types::FieldNode::internal_default_instance());
  ::types::_TreeNode_default_instance_._instance.get_mutable()->fnnode_ = const_cast< ::types::FunctionNode*>(
      ::types::FunctionNode::internal_default_instance());
  ::types::_TreeNode_default_instance_._instance.get_mutable()->ifnode_ = const_cast< ::types::IfNode*>(
      ::types::IfNode::internal_default_instance());
  ::types::_TreeNode_default_instance_._instance.get_mutable()->andnode_ = const_cast< ::types::AndNode*>(
      ::types::AndNode::internal_default_instance());
  ::types::_TreeNode_default_instance_._instance.get_mutable()->ornode_ = const_cast< ::types::OrNode*>(
      ::types::OrNode::internal_default_instance());
  ::types::_TreeNode_default_instance_._instance.get_mutable()->nullnode_ = const_cast< ::types::NullNode*>(
      ::types::NullNode::internal_default_instance());
  ::types::_TreeNode_default_instance_._instance.get_mutable()->intnode_ = const_cast< ::types::IntNode*>(
      ::types::IntNode::internal_default_instance());
  ::types::_TreeNode_default_instance_._instance.get_mutable()->floatnode_ = const_cast< ::types::FloatNode*>(
      ::types::FloatNode::internal_default_instance());
  ::types::_TreeNode_default_instance_._instance.get_mutable()->longnode_ = const_cast< ::types::LongNode*>(
      ::types::LongNode::internal_default_instance());
  ::types::_TreeNode_default_instance_._instance.get_mutable()->booleannode_ = const_cast< ::types::BooleanNode*>(
      ::types::BooleanNode::internal_default_instance());
  ::types::_TreeNode_default_instance_._instance.get_mutable()->doublenode_ = const_cast< ::types::DoubleNode*>(
      ::types::DoubleNode::internal_default_instance());
  ::types::_TreeNode_default_instance_._instance.get_mutable()->stringnode_ = const_cast< ::types::StringNode*>(
      ::types::StringNode::internal_default_instance());
  ::types::_TreeNode_default_instance_._instance.get_mutable()->binarynode_ = const_cast< ::types::BinaryNode*>(
      ::types::BinaryNode::internal_default_instance());
  ::types::_TreeNode_default_instance_._instance.get_mutable()->decimalnode_ = const_cast< ::types::DecimalNode*>(
      ::types::DecimalNode::internal_default_instance());
  ::types::_TreeNode_default_instance_._instance.get_mutable()->innode_ = const_cast< ::types::InNode*>(
      ::types::InNode::internal_default_instance());
}
class TreeNode::HasBitSetters {
 public:
  static const ::types::FieldNode& fieldnode(const TreeNode* msg);
  static void set_has_fieldnode(TreeNode* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::types::FunctionNode& fnnode(const TreeNode* msg);
  static void set_has_fnnode(TreeNode* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::types::IfNode& ifnode(const TreeNode* msg);
  static void set_has_ifnode(TreeNode* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::types::AndNode& andnode(const TreeNode* msg);
  static void set_has_andnode(TreeNode* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static const ::types::OrNode& ornode(const TreeNode* msg);
  static void set_has_ornode(TreeNode* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static const ::types::NullNode& nullnode(const TreeNode* msg);
  static void set_has_nullnode(TreeNode* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static const ::types::IntNode& intnode(const TreeNode* msg);
  static void set_has_intnode(TreeNode* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static const ::types::FloatNode& floatnode(const TreeNode* msg);
  static void set_has_floatnode(TreeNode* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static const ::types::LongNode& longnode(const TreeNode* msg);
  static void set_has_longnode(TreeNode* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static const ::types::BooleanNode& booleannode(const TreeNode* msg);
  static void set_has_booleannode(TreeNode* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static const ::types::DoubleNode& doublenode(const TreeNode* msg);
  static void set_has_doublenode(TreeNode* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static const ::types::StringNode& stringnode(const TreeNode* msg);
  static void set_has_stringnode(TreeNode* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static const ::types::BinaryNode& binarynode(const TreeNode* msg);
  static void set_has_binarynode(TreeNode* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static const ::types::DecimalNode& decimalnode(const TreeNode* msg);
  static void set_has_decimalnode(TreeNode* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static const ::types::InNode& innode(const TreeNode* msg);
  static void set_has_innode(TreeNode* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
};

const ::types::FieldNode&
TreeNode::HasBitSetters::fieldnode(const TreeNode* msg) {
  return *msg->fieldnode_;
}
const ::types::FunctionNode&
TreeNode::HasBitSetters::fnnode(const TreeNode* msg) {
  return *msg->fnnode_;
}
const ::types::IfNode&
TreeNode::HasBitSetters::ifnode(const TreeNode* msg) {
  return *msg->ifnode_;
}
const ::types::AndNode&
TreeNode::HasBitSetters::andnode(const TreeNode* msg) {
  return *msg->andnode_;
}
const ::types::OrNode&
TreeNode::HasBitSetters::ornode(const TreeNode* msg) {
  return *msg->ornode_;
}
const ::types::NullNode&
TreeNode::HasBitSetters::nullnode(const TreeNode* msg) {
  return *msg->nullnode_;
}
const ::types::IntNode&
TreeNode::HasBitSetters::intnode(const TreeNode* msg) {
  return *msg->intnode_;
}
const ::types::FloatNode&
TreeNode::HasBitSetters::floatnode(const TreeNode* msg) {
  return *msg->floatnode_;
}
const ::types::LongNode&
TreeNode::HasBitSetters::longnode(const TreeNode* msg) {
  return *msg->longnode_;
}
const ::types::BooleanNode&
TreeNode::HasBitSetters::booleannode(const TreeNode* msg) {
  return *msg->booleannode_;
}
const ::types::DoubleNode&
TreeNode::HasBitSetters::doublenode(const TreeNode* msg) {
  return *msg->doublenode_;
}
const ::types::StringNode&
TreeNode::HasBitSetters::stringnode(const TreeNode* msg) {
  return *msg->stringnode_;
}
const ::types::BinaryNode&
TreeNode::HasBitSetters::binarynode(const TreeNode* msg) {
  return *msg->binarynode_;
}
const ::types::DecimalNode&
TreeNode::HasBitSetters::decimalnode(const TreeNode* msg) {
  return *msg->decimalnode_;
}
const ::types::InNode&
TreeNode::HasBitSetters::innode(const TreeNode* msg) {
  return *msg->innode_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TreeNode::kFieldNodeFieldNumber;
const int TreeNode::kFnNodeFieldNumber;
const int TreeNode::kIfNodeFieldNumber;
const int TreeNode::kAndNodeFieldNumber;
const int TreeNode::kOrNodeFieldNumber;
const int TreeNode::kNullNodeFieldNumber;
const int TreeNode::kIntNodeFieldNumber;
const int TreeNode::kFloatNodeFieldNumber;
const int TreeNode::kLongNodeFieldNumber;
const int TreeNode::kBooleanNodeFieldNumber;
const int TreeNode::kDoubleNodeFieldNumber;
const int TreeNode::kStringNodeFieldNumber;
const int TreeNode::kBinaryNodeFieldNumber;
const int TreeNode::kDecimalNodeFieldNumber;
const int TreeNode::kInNodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TreeNode::TreeNode()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:types.TreeNode)
}
TreeNode::TreeNode(const TreeNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fieldnode()) {
    fieldnode_ = new ::types::FieldNode(*from.fieldnode_);
  } else {
    fieldnode_ = nullptr;
  }
  if (from.has_fnnode()) {
    fnnode_ = new ::types::FunctionNode(*from.fnnode_);
  } else {
    fnnode_ = nullptr;
  }
  if (from.has_ifnode()) {
    ifnode_ = new ::types::IfNode(*from.ifnode_);
  } else {
    ifnode_ = nullptr;
  }
  if (from.has_andnode()) {
    andnode_ = new ::types::AndNode(*from.andnode_);
  } else {
    andnode_ = nullptr;
  }
  if (from.has_ornode()) {
    ornode_ = new ::types::OrNode(*from.ornode_);
  } else {
    ornode_ = nullptr;
  }
  if (from.has_nullnode()) {
    nullnode_ = new ::types::NullNode(*from.nullnode_);
  } else {
    nullnode_ = nullptr;
  }
  if (from.has_intnode()) {
    intnode_ = new ::types::IntNode(*from.intnode_);
  } else {
    intnode_ = nullptr;
  }
  if (from.has_floatnode()) {
    floatnode_ = new ::types::FloatNode(*from.floatnode_);
  } else {
    floatnode_ = nullptr;
  }
  if (from.has_longnode()) {
    longnode_ = new ::types::LongNode(*from.longnode_);
  } else {
    longnode_ = nullptr;
  }
  if (from.has_booleannode()) {
    booleannode_ = new ::types::BooleanNode(*from.booleannode_);
  } else {
    booleannode_ = nullptr;
  }
  if (from.has_doublenode()) {
    doublenode_ = new ::types::DoubleNode(*from.doublenode_);
  } else {
    doublenode_ = nullptr;
  }
  if (from.has_stringnode()) {
    stringnode_ = new ::types::StringNode(*from.stringnode_);
  } else {
    stringnode_ = nullptr;
  }
  if (from.has_binarynode()) {
    binarynode_ = new ::types::BinaryNode(*from.binarynode_);
  } else {
    binarynode_ = nullptr;
  }
  if (from.has_decimalnode()) {
    decimalnode_ = new ::types::DecimalNode(*from.decimalnode_);
  } else {
    decimalnode_ = nullptr;
  }
  if (from.has_innode()) {
    innode_ = new ::types::InNode(*from.innode_);
  } else {
    innode_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:types.TreeNode)
}

void TreeNode::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AndNode_Types_2eproto.base);
  ::memset(&fieldnode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&innode_) -
      reinterpret_cast<char*>(&fieldnode_)) + sizeof(innode_));
}

TreeNode::~TreeNode() {
  // @@protoc_insertion_point(destructor:types.TreeNode)
  SharedDtor();
}

void TreeNode::SharedDtor() {
  if (this != internal_default_instance()) delete fieldnode_;
  if (this != internal_default_instance()) delete fnnode_;
  if (this != internal_default_instance()) delete ifnode_;
  if (this != internal_default_instance()) delete andnode_;
  if (this != internal_default_instance()) delete ornode_;
  if (this != internal_default_instance()) delete nullnode_;
  if (this != internal_default_instance()) delete intnode_;
  if (this != internal_default_instance()) delete floatnode_;
  if (this != internal_default_instance()) delete longnode_;
  if (this != internal_default_instance()) delete booleannode_;
  if (this != internal_default_instance()) delete doublenode_;
  if (this != internal_default_instance()) delete stringnode_;
  if (this != internal_default_instance()) delete binarynode_;
  if (this != internal_default_instance()) delete decimalnode_;
  if (this != internal_default_instance()) delete innode_;
}

void TreeNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TreeNode& TreeNode::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AndNode_Types_2eproto.base);
  return *internal_default_instance();
}


void TreeNode::Clear() {
// @@protoc_insertion_point(message_clear_start:types.TreeNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(fieldnode_ != nullptr);
      fieldnode_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(fnnode_ != nullptr);
      fnnode_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ifnode_ != nullptr);
      ifnode_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(andnode_ != nullptr);
      andnode_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(ornode_ != nullptr);
      ornode_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(nullnode_ != nullptr);
      nullnode_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(intnode_ != nullptr);
      intnode_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(floatnode_ != nullptr);
      floatnode_->Clear();
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(longnode_ != nullptr);
      longnode_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(booleannode_ != nullptr);
      booleannode_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(doublenode_ != nullptr);
      doublenode_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(stringnode_ != nullptr);
      stringnode_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(binarynode_ != nullptr);
      binarynode_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(decimalnode_ != nullptr);
      decimalnode_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(innode_ != nullptr);
      innode_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TreeNode::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TreeNode*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .types.FieldNode fieldNode = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::types::FieldNode::_InternalParse;
        object = msg->mutable_fieldnode();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .types.FunctionNode fnNode = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::types::FunctionNode::_InternalParse;
        object = msg->mutable_fnnode();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .types.IfNode ifNode = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::types::IfNode::_InternalParse;
        object = msg->mutable_ifnode();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .types.AndNode andNode = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::types::AndNode::_InternalParse;
        object = msg->mutable_andnode();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .types.OrNode orNode = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::types::OrNode::_InternalParse;
        object = msg->mutable_ornode();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .types.NullNode nullNode = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::types::NullNode::_InternalParse;
        object = msg->mutable_nullnode();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .types.IntNode intNode = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::types::IntNode::_InternalParse;
        object = msg->mutable_intnode();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .types.FloatNode floatNode = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::types::FloatNode::_InternalParse;
        object = msg->mutable_floatnode();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .types.LongNode longNode = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::types::LongNode::_InternalParse;
        object = msg->mutable_longnode();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .types.BooleanNode booleanNode = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::types::BooleanNode::_InternalParse;
        object = msg->mutable_booleannode();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .types.DoubleNode doubleNode = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::types::DoubleNode::_InternalParse;
        object = msg->mutable_doublenode();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .types.StringNode stringNode = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 138) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::types::StringNode::_InternalParse;
        object = msg->mutable_stringnode();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .types.BinaryNode binaryNode = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 146) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::types::BinaryNode::_InternalParse;
        object = msg->mutable_binarynode();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .types.DecimalNode decimalNode = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 154) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::types::DecimalNode::_InternalParse;
        object = msg->mutable_decimalnode();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .types.InNode inNode = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 170) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::types::InNode::_InternalParse;
        object = msg->mutable_innode();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TreeNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:types.TreeNode)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .types.FieldNode fieldNode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fieldnode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .types.FunctionNode fnNode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fnnode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .types.IfNode ifNode = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ifnode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .types.AndNode andNode = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_andnode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .types.OrNode orNode = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ornode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .types.NullNode nullNode = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_nullnode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .types.IntNode intNode = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_intnode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .types.FloatNode floatNode = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_floatnode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .types.LongNode longNode = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_longnode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .types.BooleanNode booleanNode = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_booleannode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .types.DoubleNode doubleNode = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (130 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_doublenode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .types.StringNode stringNode = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (138 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stringnode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .types.BinaryNode binaryNode = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (146 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_binarynode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .types.DecimalNode decimalNode = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (154 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_decimalnode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .types.InNode inNode = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (170 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_innode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:types.TreeNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:types.TreeNode)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TreeNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:types.TreeNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .types.FieldNode fieldNode = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::fieldnode(this), output);
  }

  // optional .types.FunctionNode fnNode = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::fnnode(this), output);
  }

  // optional .types.IfNode ifNode = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::ifnode(this), output);
  }

  // optional .types.AndNode andNode = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::andnode(this), output);
  }

  // optional .types.OrNode orNode = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::ornode(this), output);
  }

  // optional .types.NullNode nullNode = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, HasBitSetters::nullnode(this), output);
  }

  // optional .types.IntNode intNode = 12;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, HasBitSetters::intnode(this), output);
  }

  // optional .types.FloatNode floatNode = 13;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, HasBitSetters::floatnode(this), output);
  }

  // optional .types.LongNode longNode = 14;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, HasBitSetters::longnode(this), output);
  }

  // optional .types.BooleanNode booleanNode = 15;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, HasBitSetters::booleannode(this), output);
  }

  // optional .types.DoubleNode doubleNode = 16;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, HasBitSetters::doublenode(this), output);
  }

  // optional .types.StringNode stringNode = 17;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, HasBitSetters::stringnode(this), output);
  }

  // optional .types.BinaryNode binaryNode = 18;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, HasBitSetters::binarynode(this), output);
  }

  // optional .types.DecimalNode decimalNode = 19;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, HasBitSetters::decimalnode(this), output);
  }

  // optional .types.InNode inNode = 21;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, HasBitSetters::innode(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:types.TreeNode)
}

::google::protobuf::uint8* TreeNode::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.TreeNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .types.FieldNode fieldNode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::fieldnode(this), target);
  }

  // optional .types.FunctionNode fnNode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::fnnode(this), target);
  }

  // optional .types.IfNode ifNode = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::ifnode(this), target);
  }

  // optional .types.AndNode andNode = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::andnode(this), target);
  }

  // optional .types.OrNode orNode = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::ornode(this), target);
  }

  // optional .types.NullNode nullNode = 11;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, HasBitSetters::nullnode(this), target);
  }

  // optional .types.IntNode intNode = 12;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, HasBitSetters::intnode(this), target);
  }

  // optional .types.FloatNode floatNode = 13;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, HasBitSetters::floatnode(this), target);
  }

  // optional .types.LongNode longNode = 14;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, HasBitSetters::longnode(this), target);
  }

  // optional .types.BooleanNode booleanNode = 15;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, HasBitSetters::booleannode(this), target);
  }

  // optional .types.DoubleNode doubleNode = 16;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, HasBitSetters::doublenode(this), target);
  }

  // optional .types.StringNode stringNode = 17;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, HasBitSetters::stringnode(this), target);
  }

  // optional .types.BinaryNode binaryNode = 18;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, HasBitSetters::binarynode(this), target);
  }

  // optional .types.DecimalNode decimalNode = 19;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, HasBitSetters::decimalnode(this), target);
  }

  // optional .types.InNode inNode = 21;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, HasBitSetters::innode(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.TreeNode)
  return target;
}

size_t TreeNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.TreeNode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .types.FieldNode fieldNode = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *fieldnode_);
    }

    // optional .types.FunctionNode fnNode = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *fnnode_);
    }

    // optional .types.IfNode ifNode = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ifnode_);
    }

    // optional .types.AndNode andNode = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *andnode_);
    }

    // optional .types.OrNode orNode = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ornode_);
    }

    // optional .types.NullNode nullNode = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *nullnode_);
    }

    // optional .types.IntNode intNode = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *intnode_);
    }

    // optional .types.FloatNode floatNode = 13;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *floatnode_);
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional .types.LongNode longNode = 14;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *longnode_);
    }

    // optional .types.BooleanNode booleanNode = 15;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *booleannode_);
    }

    // optional .types.DoubleNode doubleNode = 16;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *doublenode_);
    }

    // optional .types.StringNode stringNode = 17;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *stringnode_);
    }

    // optional .types.BinaryNode binaryNode = 18;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *binarynode_);
    }

    // optional .types.DecimalNode decimalNode = 19;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *decimalnode_);
    }

    // optional .types.InNode inNode = 21;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *innode_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TreeNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:types.TreeNode)
  GOOGLE_DCHECK_NE(&from, this);
  const TreeNode* source =
      ::google::protobuf::DynamicCastToGenerated<TreeNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:types.TreeNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:types.TreeNode)
    MergeFrom(*source);
  }
}

void TreeNode::MergeFrom(const TreeNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.TreeNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_fieldnode()->::types::FieldNode::MergeFrom(from.fieldnode());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_fnnode()->::types::FunctionNode::MergeFrom(from.fnnode());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_ifnode()->::types::IfNode::MergeFrom(from.ifnode());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_andnode()->::types::AndNode::MergeFrom(from.andnode());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_ornode()->::types::OrNode::MergeFrom(from.ornode());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_nullnode()->::types::NullNode::MergeFrom(from.nullnode());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_intnode()->::types::IntNode::MergeFrom(from.intnode());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_floatnode()->::types::FloatNode::MergeFrom(from.floatnode());
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_longnode()->::types::LongNode::MergeFrom(from.longnode());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_booleannode()->::types::BooleanNode::MergeFrom(from.booleannode());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_doublenode()->::types::DoubleNode::MergeFrom(from.doublenode());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_stringnode()->::types::StringNode::MergeFrom(from.stringnode());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_binarynode()->::types::BinaryNode::MergeFrom(from.binarynode());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_decimalnode()->::types::DecimalNode::MergeFrom(from.decimalnode());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_innode()->::types::InNode::MergeFrom(from.innode());
    }
  }
}

void TreeNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:types.TreeNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreeNode::CopyFrom(const TreeNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.TreeNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeNode::IsInitialized() const {
  return true;
}

void TreeNode::Swap(TreeNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TreeNode::InternalSwap(TreeNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fieldnode_, other->fieldnode_);
  swap(fnnode_, other->fnnode_);
  swap(ifnode_, other->ifnode_);
  swap(andnode_, other->andnode_);
  swap(ornode_, other->ornode_);
  swap(nullnode_, other->nullnode_);
  swap(intnode_, other->intnode_);
  swap(floatnode_, other->floatnode_);
  swap(longnode_, other->longnode_);
  swap(booleannode_, other->booleannode_);
  swap(doublenode_, other->doublenode_);
  swap(stringnode_, other->stringnode_);
  swap(binarynode_, other->binarynode_);
  swap(decimalnode_, other->decimalnode_);
  swap(innode_, other->innode_);
}

::google::protobuf::Metadata TreeNode::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Types_2eproto);
  return ::file_level_metadata_Types_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ExpressionRoot::InitAsDefaultInstance() {
  ::types::_ExpressionRoot_default_instance_._instance.get_mutable()->root_ = const_cast< ::types::TreeNode*>(
      ::types::TreeNode::internal_default_instance());
  ::types::_ExpressionRoot_default_instance_._instance.get_mutable()->resulttype_ = const_cast< ::types::Field*>(
      ::types::Field::internal_default_instance());
}
class ExpressionRoot::HasBitSetters {
 public:
  static const ::types::TreeNode& root(const ExpressionRoot* msg);
  static void set_has_root(ExpressionRoot* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::types::Field& resulttype(const ExpressionRoot* msg);
  static void set_has_resulttype(ExpressionRoot* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::types::TreeNode&
ExpressionRoot::HasBitSetters::root(const ExpressionRoot* msg) {
  return *msg->root_;
}
const ::types::Field&
ExpressionRoot::HasBitSetters::resulttype(const ExpressionRoot* msg) {
  return *msg->resulttype_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExpressionRoot::kRootFieldNumber;
const int ExpressionRoot::kResultTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExpressionRoot::ExpressionRoot()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:types.ExpressionRoot)
}
ExpressionRoot::ExpressionRoot(const ExpressionRoot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_root()) {
    root_ = new ::types::TreeNode(*from.root_);
  } else {
    root_ = nullptr;
  }
  if (from.has_resulttype()) {
    resulttype_ = new ::types::Field(*from.resulttype_);
  } else {
    resulttype_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:types.ExpressionRoot)
}

void ExpressionRoot::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ExpressionRoot_Types_2eproto.base);
  ::memset(&root_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resulttype_) -
      reinterpret_cast<char*>(&root_)) + sizeof(resulttype_));
}

ExpressionRoot::~ExpressionRoot() {
  // @@protoc_insertion_point(destructor:types.ExpressionRoot)
  SharedDtor();
}

void ExpressionRoot::SharedDtor() {
  if (this != internal_default_instance()) delete root_;
  if (this != internal_default_instance()) delete resulttype_;
}

void ExpressionRoot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExpressionRoot& ExpressionRoot::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ExpressionRoot_Types_2eproto.base);
  return *internal_default_instance();
}


void ExpressionRoot::Clear() {
// @@protoc_insertion_point(message_clear_start:types.ExpressionRoot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(root_ != nullptr);
      root_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(resulttype_ != nullptr);
      resulttype_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExpressionRoot::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ExpressionRoot*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .types.TreeNode root = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::types::TreeNode::_InternalParse;
        object = msg->mutable_root();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .types.Field resultType = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::types::Field::_InternalParse;
        object = msg->mutable_resulttype();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExpressionRoot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:types.ExpressionRoot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .types.TreeNode root = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_root()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .types.Field resultType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resulttype()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:types.ExpressionRoot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:types.ExpressionRoot)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExpressionRoot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:types.ExpressionRoot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .types.TreeNode root = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::root(this), output);
  }

  // optional .types.Field resultType = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::resulttype(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:types.ExpressionRoot)
}

::google::protobuf::uint8* ExpressionRoot::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.ExpressionRoot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .types.TreeNode root = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::root(this), target);
  }

  // optional .types.Field resultType = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::resulttype(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.ExpressionRoot)
  return target;
}

size_t ExpressionRoot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.ExpressionRoot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .types.TreeNode root = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *root_);
    }

    // optional .types.Field resultType = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *resulttype_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExpressionRoot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:types.ExpressionRoot)
  GOOGLE_DCHECK_NE(&from, this);
  const ExpressionRoot* source =
      ::google::protobuf::DynamicCastToGenerated<ExpressionRoot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:types.ExpressionRoot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:types.ExpressionRoot)
    MergeFrom(*source);
  }
}

void ExpressionRoot::MergeFrom(const ExpressionRoot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.ExpressionRoot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_root()->::types::TreeNode::MergeFrom(from.root());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_resulttype()->::types::Field::MergeFrom(from.resulttype());
    }
  }
}

void ExpressionRoot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:types.ExpressionRoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpressionRoot::CopyFrom(const ExpressionRoot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.ExpressionRoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpressionRoot::IsInitialized() const {
  return true;
}

void ExpressionRoot::Swap(ExpressionRoot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExpressionRoot::InternalSwap(ExpressionRoot* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(root_, other->root_);
  swap(resulttype_, other->resulttype_);
}

::google::protobuf::Metadata ExpressionRoot::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Types_2eproto);
  return ::file_level_metadata_Types_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ExpressionList::InitAsDefaultInstance() {
}
class ExpressionList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExpressionList::kExprsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExpressionList::ExpressionList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:types.ExpressionList)
}
ExpressionList::ExpressionList(const ExpressionList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      exprs_(from.exprs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:types.ExpressionList)
}

void ExpressionList::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ExpressionList_Types_2eproto.base);
}

ExpressionList::~ExpressionList() {
  // @@protoc_insertion_point(destructor:types.ExpressionList)
  SharedDtor();
}

void ExpressionList::SharedDtor() {
}

void ExpressionList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExpressionList& ExpressionList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ExpressionList_Types_2eproto.base);
  return *internal_default_instance();
}


void ExpressionList::Clear() {
// @@protoc_insertion_point(message_clear_start:types.ExpressionList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exprs_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExpressionList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ExpressionList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .types.ExpressionRoot exprs = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::types::ExpressionRoot::_InternalParse;
          object = msg->add_exprs();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExpressionList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:types.ExpressionList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .types.ExpressionRoot exprs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_exprs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:types.ExpressionList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:types.ExpressionList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExpressionList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:types.ExpressionList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .types.ExpressionRoot exprs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->exprs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->exprs(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:types.ExpressionList)
}

::google::protobuf::uint8* ExpressionList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.ExpressionList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .types.ExpressionRoot exprs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->exprs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->exprs(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.ExpressionList)
  return target;
}

size_t ExpressionList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.ExpressionList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .types.ExpressionRoot exprs = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->exprs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->exprs(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExpressionList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:types.ExpressionList)
  GOOGLE_DCHECK_NE(&from, this);
  const ExpressionList* source =
      ::google::protobuf::DynamicCastToGenerated<ExpressionList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:types.ExpressionList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:types.ExpressionList)
    MergeFrom(*source);
  }
}

void ExpressionList::MergeFrom(const ExpressionList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.ExpressionList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  exprs_.MergeFrom(from.exprs_);
}

void ExpressionList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:types.ExpressionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpressionList::CopyFrom(const ExpressionList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.ExpressionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpressionList::IsInitialized() const {
  return true;
}

void ExpressionList::Swap(ExpressionList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExpressionList::InternalSwap(ExpressionList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&exprs_)->InternalSwap(CastToBase(&other->exprs_));
}

::google::protobuf::Metadata ExpressionList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Types_2eproto);
  return ::file_level_metadata_Types_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Condition::InitAsDefaultInstance() {
  ::types::_Condition_default_instance_._instance.get_mutable()->root_ = const_cast< ::types::TreeNode*>(
      ::types::TreeNode::internal_default_instance());
}
class Condition::HasBitSetters {
 public:
  static const ::types::TreeNode& root(const Condition* msg);
  static void set_has_root(Condition* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::types::TreeNode&
Condition::HasBitSetters::root(const Condition* msg) {
  return *msg->root_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Condition::kRootFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Condition::Condition()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:types.Condition)
}
Condition::Condition(const Condition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_root()) {
    root_ = new ::types::TreeNode(*from.root_);
  } else {
    root_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:types.Condition)
}

void Condition::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Condition_Types_2eproto.base);
  root_ = nullptr;
}

Condition::~Condition() {
  // @@protoc_insertion_point(destructor:types.Condition)
  SharedDtor();
}

void Condition::SharedDtor() {
  if (this != internal_default_instance()) delete root_;
}

void Condition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Condition& Condition::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Condition_Types_2eproto.base);
  return *internal_default_instance();
}


void Condition::Clear() {
// @@protoc_insertion_point(message_clear_start:types.Condition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(root_ != nullptr);
    root_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Condition::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Condition*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .types.TreeNode root = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::types::TreeNode::_InternalParse;
        object = msg->mutable_root();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Condition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:types.Condition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .types.TreeNode root = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_root()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:types.Condition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:types.Condition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Condition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:types.Condition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .types.TreeNode root = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::root(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:types.Condition)
}

::google::protobuf::uint8* Condition::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.Condition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .types.TreeNode root = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::root(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.Condition)
  return target;
}

size_t Condition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.Condition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .types.TreeNode root = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *root_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Condition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:types.Condition)
  GOOGLE_DCHECK_NE(&from, this);
  const Condition* source =
      ::google::protobuf::DynamicCastToGenerated<Condition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:types.Condition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:types.Condition)
    MergeFrom(*source);
  }
}

void Condition::MergeFrom(const Condition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.Condition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_root()) {
    mutable_root()->::types::TreeNode::MergeFrom(from.root());
  }
}

void Condition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:types.Condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Condition::CopyFrom(const Condition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.Condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Condition::IsInitialized() const {
  return true;
}

void Condition::Swap(Condition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Condition::InternalSwap(Condition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(root_, other->root_);
}

::google::protobuf::Metadata Condition::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Types_2eproto);
  return ::file_level_metadata_Types_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Schema::InitAsDefaultInstance() {
}
class Schema::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Schema::kColumnsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Schema::Schema()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:types.Schema)
}
Schema::Schema(const Schema& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      columns_(from.columns_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:types.Schema)
}

void Schema::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Schema_Types_2eproto.base);
}

Schema::~Schema() {
  // @@protoc_insertion_point(destructor:types.Schema)
  SharedDtor();
}

void Schema::SharedDtor() {
}

void Schema::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Schema& Schema::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Schema_Types_2eproto.base);
  return *internal_default_instance();
}


void Schema::Clear() {
// @@protoc_insertion_point(message_clear_start:types.Schema)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columns_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Schema::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Schema*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .types.Field columns = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::types::Field::_InternalParse;
          object = msg->add_columns();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Schema::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:types.Schema)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .types.Field columns = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_columns()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:types.Schema)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:types.Schema)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Schema::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:types.Schema)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .types.Field columns = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->columns(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:types.Schema)
}

::google::protobuf::uint8* Schema::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.Schema)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .types.Field columns = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->columns(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.Schema)
  return target;
}

size_t Schema::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.Schema)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .types.Field columns = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->columns_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->columns(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Schema::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:types.Schema)
  GOOGLE_DCHECK_NE(&from, this);
  const Schema* source =
      ::google::protobuf::DynamicCastToGenerated<Schema>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:types.Schema)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:types.Schema)
    MergeFrom(*source);
  }
}

void Schema::MergeFrom(const Schema& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.Schema)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columns_.MergeFrom(from.columns_);
}

void Schema::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:types.Schema)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Schema::CopyFrom(const Schema& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.Schema)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Schema::IsInitialized() const {
  return true;
}

void Schema::Swap(Schema* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Schema::InternalSwap(Schema* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&columns_)->InternalSwap(CastToBase(&other->columns_));
}

::google::protobuf::Metadata Schema::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Types_2eproto);
  return ::file_level_metadata_Types_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GandivaDataTypes::InitAsDefaultInstance() {
}
class GandivaDataTypes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GandivaDataTypes::kDataTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GandivaDataTypes::GandivaDataTypes()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:types.GandivaDataTypes)
}
GandivaDataTypes::GandivaDataTypes(const GandivaDataTypes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      datatype_(from.datatype_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:types.GandivaDataTypes)
}

void GandivaDataTypes::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GandivaDataTypes_Types_2eproto.base);
}

GandivaDataTypes::~GandivaDataTypes() {
  // @@protoc_insertion_point(destructor:types.GandivaDataTypes)
  SharedDtor();
}

void GandivaDataTypes::SharedDtor() {
}

void GandivaDataTypes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GandivaDataTypes& GandivaDataTypes::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GandivaDataTypes_Types_2eproto.base);
  return *internal_default_instance();
}


void GandivaDataTypes::Clear() {
// @@protoc_insertion_point(message_clear_start:types.GandivaDataTypes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datatype_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GandivaDataTypes::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GandivaDataTypes*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .types.ExtGandivaType dataType = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::types::ExtGandivaType::_InternalParse;
          object = msg->add_datatype();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GandivaDataTypes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:types.GandivaDataTypes)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .types.ExtGandivaType dataType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_datatype()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:types.GandivaDataTypes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:types.GandivaDataTypes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GandivaDataTypes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:types.GandivaDataTypes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .types.ExtGandivaType dataType = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->datatype_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->datatype(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:types.GandivaDataTypes)
}

::google::protobuf::uint8* GandivaDataTypes::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.GandivaDataTypes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .types.ExtGandivaType dataType = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->datatype_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->datatype(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.GandivaDataTypes)
  return target;
}

size_t GandivaDataTypes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.GandivaDataTypes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .types.ExtGandivaType dataType = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->datatype_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->datatype(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GandivaDataTypes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:types.GandivaDataTypes)
  GOOGLE_DCHECK_NE(&from, this);
  const GandivaDataTypes* source =
      ::google::protobuf::DynamicCastToGenerated<GandivaDataTypes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:types.GandivaDataTypes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:types.GandivaDataTypes)
    MergeFrom(*source);
  }
}

void GandivaDataTypes::MergeFrom(const GandivaDataTypes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.GandivaDataTypes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  datatype_.MergeFrom(from.datatype_);
}

void GandivaDataTypes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:types.GandivaDataTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GandivaDataTypes::CopyFrom(const GandivaDataTypes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.GandivaDataTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GandivaDataTypes::IsInitialized() const {
  return true;
}

void GandivaDataTypes::Swap(GandivaDataTypes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GandivaDataTypes::InternalSwap(GandivaDataTypes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&datatype_)->InternalSwap(CastToBase(&other->datatype_));
}

::google::protobuf::Metadata GandivaDataTypes::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Types_2eproto);
  return ::file_level_metadata_Types_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GandivaFunctions::InitAsDefaultInstance() {
}
class GandivaFunctions::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GandivaFunctions::kFunctionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GandivaFunctions::GandivaFunctions()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:types.GandivaFunctions)
}
GandivaFunctions::GandivaFunctions(const GandivaFunctions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      function_(from.function_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:types.GandivaFunctions)
}

void GandivaFunctions::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GandivaFunctions_Types_2eproto.base);
}

GandivaFunctions::~GandivaFunctions() {
  // @@protoc_insertion_point(destructor:types.GandivaFunctions)
  SharedDtor();
}

void GandivaFunctions::SharedDtor() {
}

void GandivaFunctions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GandivaFunctions& GandivaFunctions::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GandivaFunctions_Types_2eproto.base);
  return *internal_default_instance();
}


void GandivaFunctions::Clear() {
// @@protoc_insertion_point(message_clear_start:types.GandivaFunctions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  function_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GandivaFunctions::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GandivaFunctions*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .types.FunctionSignature function = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::types::FunctionSignature::_InternalParse;
          object = msg->add_function();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GandivaFunctions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:types.GandivaFunctions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .types.FunctionSignature function = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_function()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:types.GandivaFunctions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:types.GandivaFunctions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GandivaFunctions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:types.GandivaFunctions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .types.FunctionSignature function = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->function_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->function(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:types.GandivaFunctions)
}

::google::protobuf::uint8* GandivaFunctions::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.GandivaFunctions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .types.FunctionSignature function = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->function_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->function(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.GandivaFunctions)
  return target;
}

size_t GandivaFunctions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.GandivaFunctions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .types.FunctionSignature function = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->function_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->function(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GandivaFunctions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:types.GandivaFunctions)
  GOOGLE_DCHECK_NE(&from, this);
  const GandivaFunctions* source =
      ::google::protobuf::DynamicCastToGenerated<GandivaFunctions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:types.GandivaFunctions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:types.GandivaFunctions)
    MergeFrom(*source);
  }
}

void GandivaFunctions::MergeFrom(const GandivaFunctions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.GandivaFunctions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  function_.MergeFrom(from.function_);
}

void GandivaFunctions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:types.GandivaFunctions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GandivaFunctions::CopyFrom(const GandivaFunctions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.GandivaFunctions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GandivaFunctions::IsInitialized() const {
  return true;
}

void GandivaFunctions::Swap(GandivaFunctions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GandivaFunctions::InternalSwap(GandivaFunctions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&function_)->InternalSwap(CastToBase(&other->function_));
}

::google::protobuf::Metadata GandivaFunctions::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Types_2eproto);
  return ::file_level_metadata_Types_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FunctionSignature::InitAsDefaultInstance() {
  ::types::_FunctionSignature_default_instance_._instance.get_mutable()->returntype_ = const_cast< ::types::ExtGandivaType*>(
      ::types::ExtGandivaType::internal_default_instance());
}
class FunctionSignature::HasBitSetters {
 public:
  static void set_has_name(FunctionSignature* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::types::ExtGandivaType& returntype(const FunctionSignature* msg);
  static void set_has_returntype(FunctionSignature* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::types::ExtGandivaType&
FunctionSignature::HasBitSetters::returntype(const FunctionSignature* msg) {
  return *msg->returntype_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FunctionSignature::kNameFieldNumber;
const int FunctionSignature::kReturnTypeFieldNumber;
const int FunctionSignature::kParamTypesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FunctionSignature::FunctionSignature()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:types.FunctionSignature)
}
FunctionSignature::FunctionSignature(const FunctionSignature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      paramtypes_(from.paramtypes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_returntype()) {
    returntype_ = new ::types::ExtGandivaType(*from.returntype_);
  } else {
    returntype_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:types.FunctionSignature)
}

void FunctionSignature::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FunctionSignature_Types_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  returntype_ = nullptr;
}

FunctionSignature::~FunctionSignature() {
  // @@protoc_insertion_point(destructor:types.FunctionSignature)
  SharedDtor();
}

void FunctionSignature::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete returntype_;
}

void FunctionSignature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FunctionSignature& FunctionSignature::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FunctionSignature_Types_2eproto.base);
  return *internal_default_instance();
}


void FunctionSignature::Clear() {
// @@protoc_insertion_point(message_clear_start:types.FunctionSignature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paramtypes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(returntype_ != nullptr);
      returntype_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FunctionSignature::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FunctionSignature*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("types.FunctionSignature.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional .types.ExtGandivaType returnType = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::types::ExtGandivaType::_InternalParse;
        object = msg->mutable_returntype();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .types.ExtGandivaType paramTypes = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::types::ExtGandivaType::_InternalParse;
          object = msg->add_paramtypes();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FunctionSignature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:types.FunctionSignature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "types.FunctionSignature.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .types.ExtGandivaType returnType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_returntype()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .types.ExtGandivaType paramTypes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_paramtypes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:types.FunctionSignature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:types.FunctionSignature)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FunctionSignature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:types.FunctionSignature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "types.FunctionSignature.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .types.ExtGandivaType returnType = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::returntype(this), output);
  }

  // repeated .types.ExtGandivaType paramTypes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->paramtypes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->paramtypes(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:types.FunctionSignature)
}

::google::protobuf::uint8* FunctionSignature::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.FunctionSignature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "types.FunctionSignature.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .types.ExtGandivaType returnType = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::returntype(this), target);
  }

  // repeated .types.ExtGandivaType paramTypes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->paramtypes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->paramtypes(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.FunctionSignature)
  return target;
}

size_t FunctionSignature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.FunctionSignature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .types.ExtGandivaType paramTypes = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->paramtypes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->paramtypes(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .types.ExtGandivaType returnType = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *returntype_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FunctionSignature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:types.FunctionSignature)
  GOOGLE_DCHECK_NE(&from, this);
  const FunctionSignature* source =
      ::google::protobuf::DynamicCastToGenerated<FunctionSignature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:types.FunctionSignature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:types.FunctionSignature)
    MergeFrom(*source);
  }
}

void FunctionSignature::MergeFrom(const FunctionSignature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.FunctionSignature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  paramtypes_.MergeFrom(from.paramtypes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_returntype()->::types::ExtGandivaType::MergeFrom(from.returntype());
    }
  }
}

void FunctionSignature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:types.FunctionSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionSignature::CopyFrom(const FunctionSignature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.FunctionSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionSignature::IsInitialized() const {
  return true;
}

void FunctionSignature::Swap(FunctionSignature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FunctionSignature::InternalSwap(FunctionSignature* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&paramtypes_)->InternalSwap(CastToBase(&other->paramtypes_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(returntype_, other->returntype_);
}

::google::protobuf::Metadata FunctionSignature::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Types_2eproto);
  return ::file_level_metadata_Types_2eproto[kIndexInFileMessages];
}


// ===================================================================

void InNode::InitAsDefaultInstance() {
  ::types::_InNode_default_instance_._instance.get_mutable()->field_ = const_cast< ::types::FieldNode*>(
      ::types::FieldNode::internal_default_instance());
  ::types::_InNode_default_instance_._instance.get_mutable()->intvalues_ = const_cast< ::types::IntConstants*>(
      ::types::IntConstants::internal_default_instance());
  ::types::_InNode_default_instance_._instance.get_mutable()->longvalues_ = const_cast< ::types::LongConstants*>(
      ::types::LongConstants::internal_default_instance());
  ::types::_InNode_default_instance_._instance.get_mutable()->stringvalues_ = const_cast< ::types::StringConstants*>(
      ::types::StringConstants::internal_default_instance());
  ::types::_InNode_default_instance_._instance.get_mutable()->binaryvalues_ = const_cast< ::types::BinaryConstants*>(
      ::types::BinaryConstants::internal_default_instance());
}
class InNode::HasBitSetters {
 public:
  static const ::types::FieldNode& field(const InNode* msg);
  static void set_has_field(InNode* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::types::IntConstants& intvalues(const InNode* msg);
  static void set_has_intvalues(InNode* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::types::LongConstants& longvalues(const InNode* msg);
  static void set_has_longvalues(InNode* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::types::StringConstants& stringvalues(const InNode* msg);
  static void set_has_stringvalues(InNode* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static const ::types::BinaryConstants& binaryvalues(const InNode* msg);
  static void set_has_binaryvalues(InNode* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

const ::types::FieldNode&
InNode::HasBitSetters::field(const InNode* msg) {
  return *msg->field_;
}
const ::types::IntConstants&
InNode::HasBitSetters::intvalues(const InNode* msg) {
  return *msg->intvalues_;
}
const ::types::LongConstants&
InNode::HasBitSetters::longvalues(const InNode* msg) {
  return *msg->longvalues_;
}
const ::types::StringConstants&
InNode::HasBitSetters::stringvalues(const InNode* msg) {
  return *msg->stringvalues_;
}
const ::types::BinaryConstants&
InNode::HasBitSetters::binaryvalues(const InNode* msg) {
  return *msg->binaryvalues_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InNode::kFieldFieldNumber;
const int InNode::kIntValuesFieldNumber;
const int InNode::kLongValuesFieldNumber;
const int InNode::kStringValuesFieldNumber;
const int InNode::kBinaryValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InNode::InNode()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:types.InNode)
}
InNode::InNode(const InNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_field()) {
    field_ = new ::types::FieldNode(*from.field_);
  } else {
    field_ = nullptr;
  }
  if (from.has_intvalues()) {
    intvalues_ = new ::types::IntConstants(*from.intvalues_);
  } else {
    intvalues_ = nullptr;
  }
  if (from.has_longvalues()) {
    longvalues_ = new ::types::LongConstants(*from.longvalues_);
  } else {
    longvalues_ = nullptr;
  }
  if (from.has_stringvalues()) {
    stringvalues_ = new ::types::StringConstants(*from.stringvalues_);
  } else {
    stringvalues_ = nullptr;
  }
  if (from.has_binaryvalues()) {
    binaryvalues_ = new ::types::BinaryConstants(*from.binaryvalues_);
  } else {
    binaryvalues_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:types.InNode)
}

void InNode::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_InNode_Types_2eproto.base);
  ::memset(&field_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&binaryvalues_) -
      reinterpret_cast<char*>(&field_)) + sizeof(binaryvalues_));
}

InNode::~InNode() {
  // @@protoc_insertion_point(destructor:types.InNode)
  SharedDtor();
}

void InNode::SharedDtor() {
  if (this != internal_default_instance()) delete field_;
  if (this != internal_default_instance()) delete intvalues_;
  if (this != internal_default_instance()) delete longvalues_;
  if (this != internal_default_instance()) delete stringvalues_;
  if (this != internal_default_instance()) delete binaryvalues_;
}

void InNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InNode& InNode::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InNode_Types_2eproto.base);
  return *internal_default_instance();
}


void InNode::Clear() {
// @@protoc_insertion_point(message_clear_start:types.InNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(field_ != nullptr);
      field_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(intvalues_ != nullptr);
      intvalues_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(longvalues_ != nullptr);
      longvalues_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(stringvalues_ != nullptr);
      stringvalues_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(binaryvalues_ != nullptr);
      binaryvalues_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InNode::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InNode*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .types.FieldNode field = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::types::FieldNode::_InternalParse;
        object = msg->mutable_field();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .types.IntConstants intValues = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::types::IntConstants::_InternalParse;
        object = msg->mutable_intvalues();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .types.LongConstants longValues = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::types::LongConstants::_InternalParse;
        object = msg->mutable_longvalues();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .types.StringConstants stringValues = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::types::StringConstants::_InternalParse;
        object = msg->mutable_stringvalues();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .types.BinaryConstants binaryValues = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::types::BinaryConstants::_InternalParse;
        object = msg->mutable_binaryvalues();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:types.InNode)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .types.FieldNode field = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .types.IntConstants intValues = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_intvalues()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .types.LongConstants longValues = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_longvalues()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .types.StringConstants stringValues = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stringvalues()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .types.BinaryConstants binaryValues = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_binaryvalues()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:types.InNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:types.InNode)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:types.InNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .types.FieldNode field = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::field(this), output);
  }

  // optional .types.IntConstants intValues = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::intvalues(this), output);
  }

  // optional .types.LongConstants longValues = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::longvalues(this), output);
  }

  // optional .types.StringConstants stringValues = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::stringvalues(this), output);
  }

  // optional .types.BinaryConstants binaryValues = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::binaryvalues(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:types.InNode)
}

::google::protobuf::uint8* InNode::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.InNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .types.FieldNode field = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::field(this), target);
  }

  // optional .types.IntConstants intValues = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::intvalues(this), target);
  }

  // optional .types.LongConstants longValues = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::longvalues(this), target);
  }

  // optional .types.StringConstants stringValues = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::stringvalues(this), target);
  }

  // optional .types.BinaryConstants binaryValues = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::binaryvalues(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.InNode)
  return target;
}

size_t InNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.InNode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .types.FieldNode field = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *field_);
    }

    // optional .types.IntConstants intValues = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *intvalues_);
    }

    // optional .types.LongConstants longValues = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *longvalues_);
    }

    // optional .types.StringConstants stringValues = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *stringvalues_);
    }

    // optional .types.BinaryConstants binaryValues = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *binaryvalues_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:types.InNode)
  GOOGLE_DCHECK_NE(&from, this);
  const InNode* source =
      ::google::protobuf::DynamicCastToGenerated<InNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:types.InNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:types.InNode)
    MergeFrom(*source);
  }
}

void InNode::MergeFrom(const InNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.InNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_field()->::types::FieldNode::MergeFrom(from.field());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_intvalues()->::types::IntConstants::MergeFrom(from.intvalues());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_longvalues()->::types::LongConstants::MergeFrom(from.longvalues());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_stringvalues()->::types::StringConstants::MergeFrom(from.stringvalues());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_binaryvalues()->::types::BinaryConstants::MergeFrom(from.binaryvalues());
    }
  }
}

void InNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:types.InNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InNode::CopyFrom(const InNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.InNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InNode::IsInitialized() const {
  return true;
}

void InNode::Swap(InNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InNode::InternalSwap(InNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(field_, other->field_);
  swap(intvalues_, other->intvalues_);
  swap(longvalues_, other->longvalues_);
  swap(stringvalues_, other->stringvalues_);
  swap(binaryvalues_, other->binaryvalues_);
}

::google::protobuf::Metadata InNode::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Types_2eproto);
  return ::file_level_metadata_Types_2eproto[kIndexInFileMessages];
}


// ===================================================================

void IntConstants::InitAsDefaultInstance() {
}
class IntConstants::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IntConstants::kIntValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IntConstants::IntConstants()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:types.IntConstants)
}
IntConstants::IntConstants(const IntConstants& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      intvalues_(from.intvalues_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:types.IntConstants)
}

void IntConstants::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_IntConstants_Types_2eproto.base);
}

IntConstants::~IntConstants() {
  // @@protoc_insertion_point(destructor:types.IntConstants)
  SharedDtor();
}

void IntConstants::SharedDtor() {
}

void IntConstants::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntConstants& IntConstants::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_IntConstants_Types_2eproto.base);
  return *internal_default_instance();
}


void IntConstants::Clear() {
// @@protoc_insertion_point(message_clear_start:types.IntConstants)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  intvalues_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IntConstants::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<IntConstants*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .types.IntNode intValues = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::types::IntNode::_InternalParse;
          object = msg->add_intvalues();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IntConstants::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:types.IntConstants)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .types.IntNode intValues = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_intvalues()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:types.IntConstants)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:types.IntConstants)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IntConstants::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:types.IntConstants)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .types.IntNode intValues = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->intvalues_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->intvalues(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:types.IntConstants)
}

::google::protobuf::uint8* IntConstants::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.IntConstants)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .types.IntNode intValues = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->intvalues_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->intvalues(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.IntConstants)
  return target;
}

size_t IntConstants::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.IntConstants)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .types.IntNode intValues = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->intvalues_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->intvalues(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntConstants::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:types.IntConstants)
  GOOGLE_DCHECK_NE(&from, this);
  const IntConstants* source =
      ::google::protobuf::DynamicCastToGenerated<IntConstants>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:types.IntConstants)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:types.IntConstants)
    MergeFrom(*source);
  }
}

void IntConstants::MergeFrom(const IntConstants& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.IntConstants)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  intvalues_.MergeFrom(from.intvalues_);
}

void IntConstants::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:types.IntConstants)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntConstants::CopyFrom(const IntConstants& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.IntConstants)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntConstants::IsInitialized() const {
  return true;
}

void IntConstants::Swap(IntConstants* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IntConstants::InternalSwap(IntConstants* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&intvalues_)->InternalSwap(CastToBase(&other->intvalues_));
}

::google::protobuf::Metadata IntConstants::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Types_2eproto);
  return ::file_level_metadata_Types_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LongConstants::InitAsDefaultInstance() {
}
class LongConstants::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LongConstants::kLongValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LongConstants::LongConstants()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:types.LongConstants)
}
LongConstants::LongConstants(const LongConstants& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      longvalues_(from.longvalues_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:types.LongConstants)
}

void LongConstants::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LongConstants_Types_2eproto.base);
}

LongConstants::~LongConstants() {
  // @@protoc_insertion_point(destructor:types.LongConstants)
  SharedDtor();
}

void LongConstants::SharedDtor() {
}

void LongConstants::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LongConstants& LongConstants::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LongConstants_Types_2eproto.base);
  return *internal_default_instance();
}


void LongConstants::Clear() {
// @@protoc_insertion_point(message_clear_start:types.LongConstants)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  longvalues_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LongConstants::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LongConstants*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .types.LongNode longValues = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::types::LongNode::_InternalParse;
          object = msg->add_longvalues();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LongConstants::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:types.LongConstants)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .types.LongNode longValues = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_longvalues()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:types.LongConstants)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:types.LongConstants)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LongConstants::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:types.LongConstants)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .types.LongNode longValues = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->longvalues_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->longvalues(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:types.LongConstants)
}

::google::protobuf::uint8* LongConstants::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.LongConstants)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .types.LongNode longValues = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->longvalues_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->longvalues(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.LongConstants)
  return target;
}

size_t LongConstants::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.LongConstants)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .types.LongNode longValues = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->longvalues_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->longvalues(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LongConstants::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:types.LongConstants)
  GOOGLE_DCHECK_NE(&from, this);
  const LongConstants* source =
      ::google::protobuf::DynamicCastToGenerated<LongConstants>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:types.LongConstants)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:types.LongConstants)
    MergeFrom(*source);
  }
}

void LongConstants::MergeFrom(const LongConstants& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.LongConstants)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  longvalues_.MergeFrom(from.longvalues_);
}

void LongConstants::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:types.LongConstants)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LongConstants::CopyFrom(const LongConstants& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.LongConstants)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LongConstants::IsInitialized() const {
  return true;
}

void LongConstants::Swap(LongConstants* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LongConstants::InternalSwap(LongConstants* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&longvalues_)->InternalSwap(CastToBase(&other->longvalues_));
}

::google::protobuf::Metadata LongConstants::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Types_2eproto);
  return ::file_level_metadata_Types_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StringConstants::InitAsDefaultInstance() {
}
class StringConstants::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StringConstants::kStringValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StringConstants::StringConstants()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:types.StringConstants)
}
StringConstants::StringConstants(const StringConstants& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      stringvalues_(from.stringvalues_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:types.StringConstants)
}

void StringConstants::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StringConstants_Types_2eproto.base);
}

StringConstants::~StringConstants() {
  // @@protoc_insertion_point(destructor:types.StringConstants)
  SharedDtor();
}

void StringConstants::SharedDtor() {
}

void StringConstants::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StringConstants& StringConstants::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StringConstants_Types_2eproto.base);
  return *internal_default_instance();
}


void StringConstants::Clear() {
// @@protoc_insertion_point(message_clear_start:types.StringConstants)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stringvalues_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StringConstants::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StringConstants*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .types.StringNode stringValues = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::types::StringNode::_InternalParse;
          object = msg->add_stringvalues();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StringConstants::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:types.StringConstants)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .types.StringNode stringValues = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_stringvalues()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:types.StringConstants)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:types.StringConstants)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StringConstants::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:types.StringConstants)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .types.StringNode stringValues = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stringvalues_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->stringvalues(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:types.StringConstants)
}

::google::protobuf::uint8* StringConstants::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.StringConstants)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .types.StringNode stringValues = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stringvalues_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->stringvalues(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.StringConstants)
  return target;
}

size_t StringConstants::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.StringConstants)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .types.StringNode stringValues = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->stringvalues_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stringvalues(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StringConstants::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:types.StringConstants)
  GOOGLE_DCHECK_NE(&from, this);
  const StringConstants* source =
      ::google::protobuf::DynamicCastToGenerated<StringConstants>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:types.StringConstants)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:types.StringConstants)
    MergeFrom(*source);
  }
}

void StringConstants::MergeFrom(const StringConstants& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.StringConstants)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stringvalues_.MergeFrom(from.stringvalues_);
}

void StringConstants::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:types.StringConstants)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringConstants::CopyFrom(const StringConstants& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.StringConstants)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringConstants::IsInitialized() const {
  return true;
}

void StringConstants::Swap(StringConstants* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StringConstants::InternalSwap(StringConstants* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&stringvalues_)->InternalSwap(CastToBase(&other->stringvalues_));
}

::google::protobuf::Metadata StringConstants::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Types_2eproto);
  return ::file_level_metadata_Types_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BinaryConstants::InitAsDefaultInstance() {
}
class BinaryConstants::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BinaryConstants::kBinaryValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BinaryConstants::BinaryConstants()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:types.BinaryConstants)
}
BinaryConstants::BinaryConstants(const BinaryConstants& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      binaryvalues_(from.binaryvalues_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:types.BinaryConstants)
}

void BinaryConstants::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BinaryConstants_Types_2eproto.base);
}

BinaryConstants::~BinaryConstants() {
  // @@protoc_insertion_point(destructor:types.BinaryConstants)
  SharedDtor();
}

void BinaryConstants::SharedDtor() {
}

void BinaryConstants::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BinaryConstants& BinaryConstants::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BinaryConstants_Types_2eproto.base);
  return *internal_default_instance();
}


void BinaryConstants::Clear() {
// @@protoc_insertion_point(message_clear_start:types.BinaryConstants)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  binaryvalues_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BinaryConstants::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BinaryConstants*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .types.BinaryNode binaryValues = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::types::BinaryNode::_InternalParse;
          object = msg->add_binaryvalues();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BinaryConstants::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:types.BinaryConstants)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .types.BinaryNode binaryValues = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_binaryvalues()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:types.BinaryConstants)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:types.BinaryConstants)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BinaryConstants::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:types.BinaryConstants)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .types.BinaryNode binaryValues = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->binaryvalues_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->binaryvalues(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:types.BinaryConstants)
}

::google::protobuf::uint8* BinaryConstants::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:types.BinaryConstants)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .types.BinaryNode binaryValues = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->binaryvalues_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->binaryvalues(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:types.BinaryConstants)
  return target;
}

size_t BinaryConstants::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:types.BinaryConstants)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .types.BinaryNode binaryValues = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->binaryvalues_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->binaryvalues(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinaryConstants::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:types.BinaryConstants)
  GOOGLE_DCHECK_NE(&from, this);
  const BinaryConstants* source =
      ::google::protobuf::DynamicCastToGenerated<BinaryConstants>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:types.BinaryConstants)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:types.BinaryConstants)
    MergeFrom(*source);
  }
}

void BinaryConstants::MergeFrom(const BinaryConstants& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:types.BinaryConstants)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  binaryvalues_.MergeFrom(from.binaryvalues_);
}

void BinaryConstants::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:types.BinaryConstants)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinaryConstants::CopyFrom(const BinaryConstants& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:types.BinaryConstants)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryConstants::IsInitialized() const {
  return true;
}

void BinaryConstants::Swap(BinaryConstants* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BinaryConstants::InternalSwap(BinaryConstants* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&binaryvalues_)->InternalSwap(CastToBase(&other->binaryvalues_));
}

::google::protobuf::Metadata BinaryConstants::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Types_2eproto);
  return ::file_level_metadata_Types_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace types
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::types::ExtGandivaType* Arena::CreateMaybeMessage< ::types::ExtGandivaType >(Arena* arena) {
  return Arena::CreateInternal< ::types::ExtGandivaType >(arena);
}
template<> PROTOBUF_NOINLINE ::types::Field* Arena::CreateMaybeMessage< ::types::Field >(Arena* arena) {
  return Arena::CreateInternal< ::types::Field >(arena);
}
template<> PROTOBUF_NOINLINE ::types::FieldNode* Arena::CreateMaybeMessage< ::types::FieldNode >(Arena* arena) {
  return Arena::CreateInternal< ::types::FieldNode >(arena);
}
template<> PROTOBUF_NOINLINE ::types::FunctionNode* Arena::CreateMaybeMessage< ::types::FunctionNode >(Arena* arena) {
  return Arena::CreateInternal< ::types::FunctionNode >(arena);
}
template<> PROTOBUF_NOINLINE ::types::IfNode* Arena::CreateMaybeMessage< ::types::IfNode >(Arena* arena) {
  return Arena::CreateInternal< ::types::IfNode >(arena);
}
template<> PROTOBUF_NOINLINE ::types::AndNode* Arena::CreateMaybeMessage< ::types::AndNode >(Arena* arena) {
  return Arena::CreateInternal< ::types::AndNode >(arena);
}
template<> PROTOBUF_NOINLINE ::types::OrNode* Arena::CreateMaybeMessage< ::types::OrNode >(Arena* arena) {
  return Arena::CreateInternal< ::types::OrNode >(arena);
}
template<> PROTOBUF_NOINLINE ::types::NullNode* Arena::CreateMaybeMessage< ::types::NullNode >(Arena* arena) {
  return Arena::CreateInternal< ::types::NullNode >(arena);
}
template<> PROTOBUF_NOINLINE ::types::IntNode* Arena::CreateMaybeMessage< ::types::IntNode >(Arena* arena) {
  return Arena::CreateInternal< ::types::IntNode >(arena);
}
template<> PROTOBUF_NOINLINE ::types::FloatNode* Arena::CreateMaybeMessage< ::types::FloatNode >(Arena* arena) {
  return Arena::CreateInternal< ::types::FloatNode >(arena);
}
template<> PROTOBUF_NOINLINE ::types::DoubleNode* Arena::CreateMaybeMessage< ::types::DoubleNode >(Arena* arena) {
  return Arena::CreateInternal< ::types::DoubleNode >(arena);
}
template<> PROTOBUF_NOINLINE ::types::BooleanNode* Arena::CreateMaybeMessage< ::types::BooleanNode >(Arena* arena) {
  return Arena::CreateInternal< ::types::BooleanNode >(arena);
}
template<> PROTOBUF_NOINLINE ::types::LongNode* Arena::CreateMaybeMessage< ::types::LongNode >(Arena* arena) {
  return Arena::CreateInternal< ::types::LongNode >(arena);
}
template<> PROTOBUF_NOINLINE ::types::StringNode* Arena::CreateMaybeMessage< ::types::StringNode >(Arena* arena) {
  return Arena::CreateInternal< ::types::StringNode >(arena);
}
template<> PROTOBUF_NOINLINE ::types::BinaryNode* Arena::CreateMaybeMessage< ::types::BinaryNode >(Arena* arena) {
  return Arena::CreateInternal< ::types::BinaryNode >(arena);
}
template<> PROTOBUF_NOINLINE ::types::DecimalNode* Arena::CreateMaybeMessage< ::types::DecimalNode >(Arena* arena) {
  return Arena::CreateInternal< ::types::DecimalNode >(arena);
}
template<> PROTOBUF_NOINLINE ::types::TreeNode* Arena::CreateMaybeMessage< ::types::TreeNode >(Arena* arena) {
  return Arena::CreateInternal< ::types::TreeNode >(arena);
}
template<> PROTOBUF_NOINLINE ::types::ExpressionRoot* Arena::CreateMaybeMessage< ::types::ExpressionRoot >(Arena* arena) {
  return Arena::CreateInternal< ::types::ExpressionRoot >(arena);
}
template<> PROTOBUF_NOINLINE ::types::ExpressionList* Arena::CreateMaybeMessage< ::types::ExpressionList >(Arena* arena) {
  return Arena::CreateInternal< ::types::ExpressionList >(arena);
}
template<> PROTOBUF_NOINLINE ::types::Condition* Arena::CreateMaybeMessage< ::types::Condition >(Arena* arena) {
  return Arena::CreateInternal< ::types::Condition >(arena);
}
template<> PROTOBUF_NOINLINE ::types::Schema* Arena::CreateMaybeMessage< ::types::Schema >(Arena* arena) {
  return Arena::CreateInternal< ::types::Schema >(arena);
}
template<> PROTOBUF_NOINLINE ::types::GandivaDataTypes* Arena::CreateMaybeMessage< ::types::GandivaDataTypes >(Arena* arena) {
  return Arena::CreateInternal< ::types::GandivaDataTypes >(arena);
}
template<> PROTOBUF_NOINLINE ::types::GandivaFunctions* Arena::CreateMaybeMessage< ::types::GandivaFunctions >(Arena* arena) {
  return Arena::CreateInternal< ::types::GandivaFunctions >(arena);
}
template<> PROTOBUF_NOINLINE ::types::FunctionSignature* Arena::CreateMaybeMessage< ::types::FunctionSignature >(Arena* arena) {
  return Arena::CreateInternal< ::types::FunctionSignature >(arena);
}
template<> PROTOBUF_NOINLINE ::types::InNode* Arena::CreateMaybeMessage< ::types::InNode >(Arena* arena) {
  return Arena::CreateInternal< ::types::InNode >(arena);
}
template<> PROTOBUF_NOINLINE ::types::IntConstants* Arena::CreateMaybeMessage< ::types::IntConstants >(Arena* arena) {
  return Arena::CreateInternal< ::types::IntConstants >(arena);
}
template<> PROTOBUF_NOINLINE ::types::LongConstants* Arena::CreateMaybeMessage< ::types::LongConstants >(Arena* arena) {
  return Arena::CreateInternal< ::types::LongConstants >(arena);
}
template<> PROTOBUF_NOINLINE ::types::StringConstants* Arena::CreateMaybeMessage< ::types::StringConstants >(Arena* arena) {
  return Arena::CreateInternal< ::types::StringConstants >(arena);
}
template<> PROTOBUF_NOINLINE ::types::BinaryConstants* Arena::CreateMaybeMessage< ::types::BinaryConstants >(Arena* arena) {
  return Arena::CreateInternal< ::types::BinaryConstants >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
